// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Command_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Command_2eproto;
namespace hybrid {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_Advertise;
struct Command_AdvertiseDefaultTypeInternal;
extern Command_AdvertiseDefaultTypeInternal _Command_Advertise_default_instance_;
class Command_AdvertiseService;
struct Command_AdvertiseServiceDefaultTypeInternal;
extern Command_AdvertiseServiceDefaultTypeInternal _Command_AdvertiseService_default_instance_;
class Command_CallService;
struct Command_CallServiceDefaultTypeInternal;
extern Command_CallServiceDefaultTypeInternal _Command_CallService_default_instance_;
class Command_Log;
struct Command_LogDefaultTypeInternal;
extern Command_LogDefaultTypeInternal _Command_Log_default_instance_;
class Command_Publish;
struct Command_PublishDefaultTypeInternal;
extern Command_PublishDefaultTypeInternal _Command_Publish_default_instance_;
class Command_ResponseService;
struct Command_ResponseServiceDefaultTypeInternal;
extern Command_ResponseServiceDefaultTypeInternal _Command_ResponseService_default_instance_;
class Command_Subscribe;
struct Command_SubscribeDefaultTypeInternal;
extern Command_SubscribeDefaultTypeInternal _Command_Subscribe_default_instance_;
class Command_Unadvertise;
struct Command_UnadvertiseDefaultTypeInternal;
extern Command_UnadvertiseDefaultTypeInternal _Command_Unadvertise_default_instance_;
class Command_UnadvertiseService;
struct Command_UnadvertiseServiceDefaultTypeInternal;
extern Command_UnadvertiseServiceDefaultTypeInternal _Command_UnadvertiseService_default_instance_;
class Command_Unsubscribe;
struct Command_UnsubscribeDefaultTypeInternal;
extern Command_UnsubscribeDefaultTypeInternal _Command_Unsubscribe_default_instance_;
}  // namespace hybrid
PROTOBUF_NAMESPACE_OPEN
template<> ::hybrid::Command* Arena::CreateMaybeMessage<::hybrid::Command>(Arena*);
template<> ::hybrid::Command_Advertise* Arena::CreateMaybeMessage<::hybrid::Command_Advertise>(Arena*);
template<> ::hybrid::Command_AdvertiseService* Arena::CreateMaybeMessage<::hybrid::Command_AdvertiseService>(Arena*);
template<> ::hybrid::Command_CallService* Arena::CreateMaybeMessage<::hybrid::Command_CallService>(Arena*);
template<> ::hybrid::Command_Log* Arena::CreateMaybeMessage<::hybrid::Command_Log>(Arena*);
template<> ::hybrid::Command_Publish* Arena::CreateMaybeMessage<::hybrid::Command_Publish>(Arena*);
template<> ::hybrid::Command_ResponseService* Arena::CreateMaybeMessage<::hybrid::Command_ResponseService>(Arena*);
template<> ::hybrid::Command_Subscribe* Arena::CreateMaybeMessage<::hybrid::Command_Subscribe>(Arena*);
template<> ::hybrid::Command_Unadvertise* Arena::CreateMaybeMessage<::hybrid::Command_Unadvertise>(Arena*);
template<> ::hybrid::Command_UnadvertiseService* Arena::CreateMaybeMessage<::hybrid::Command_UnadvertiseService>(Arena*);
template<> ::hybrid::Command_Unsubscribe* Arena::CreateMaybeMessage<::hybrid::Command_Unsubscribe>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hybrid {

enum Command_Log_Level : int {
  Command_Log_Level_DEBUG = 0,
  Command_Log_Level_INFO = 1,
  Command_Log_Level_WARN = 2,
  Command_Log_Level_ERROR = 3,
  Command_Log_Level_FATAL = 4,
  Command_Log_Level_Command_Log_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Command_Log_Level_Command_Log_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Command_Log_Level_IsValid(int value);
constexpr Command_Log_Level Command_Log_Level_Level_MIN = Command_Log_Level_DEBUG;
constexpr Command_Log_Level Command_Log_Level_Level_MAX = Command_Log_Level_FATAL;
constexpr int Command_Log_Level_Level_ARRAYSIZE = Command_Log_Level_Level_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_Log_Level_descriptor();
template<typename T>
inline const std::string& Command_Log_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command_Log_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Log_Level_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_Log_Level_descriptor(), enum_t_value);
}
inline bool Command_Log_Level_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command_Log_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command_Log_Level>(
    Command_Log_Level_descriptor(), name, value);
}
enum Command_Type : int {
  Command_Type_UNKNOWN = 0,
  Command_Type_ADVERTISE = 1,
  Command_Type_PUBLISH = 2,
  Command_Type_UNADVERTISE = 3,
  Command_Type_SUBSCRIBE = 4,
  Command_Type_UNSUBSCRIBE = 5,
  Command_Type_ADVERTISE_SERVICE = 6,
  Command_Type_CALL_SERVICE = 7,
  Command_Type_RESPONSE_SERVICE = 8,
  Command_Type_UNADVERTISE_SERVICE = 9,
  Command_Type_LOG = 10,
  Command_Type_PING = 128,
  Command_Type_Command_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Command_Type_Command_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Command_Type_IsValid(int value);
constexpr Command_Type Command_Type_Type_MIN = Command_Type_UNKNOWN;
constexpr Command_Type Command_Type_Type_MAX = Command_Type_PING;
constexpr int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_Type_descriptor();
template<typename T>
inline const std::string& Command_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_Type_descriptor(), enum_t_value);
}
inline bool Command_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
// ===================================================================

class Command_Advertise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.Advertise) */ {
 public:
  inline Command_Advertise() : Command_Advertise(nullptr) {}
  ~Command_Advertise() override;
  explicit PROTOBUF_CONSTEXPR Command_Advertise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Advertise(const Command_Advertise& from);
  Command_Advertise(Command_Advertise&& from) noexcept
    : Command_Advertise() {
    *this = ::std::move(from);
  }

  inline Command_Advertise& operator=(const Command_Advertise& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Advertise& operator=(Command_Advertise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Advertise& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Advertise* internal_default_instance() {
    return reinterpret_cast<const Command_Advertise*>(
               &_Command_Advertise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command_Advertise& a, Command_Advertise& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Advertise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Advertise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Advertise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Advertise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Advertise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Advertise& from) {
    Command_Advertise::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Advertise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.Advertise";
  }
  protected:
  explicit Command_Advertise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kTypeFieldNumber = 2,
    kQueueSizeFieldNumber = 4,
    kLatchFieldNumber = 5,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional uint32 queue_size = 4;
  bool has_queue_size() const;
  private:
  bool _internal_has_queue_size() const;
  public:
  void clear_queue_size();
  uint32_t queue_size() const;
  void set_queue_size(uint32_t value);
  private:
  uint32_t _internal_queue_size() const;
  void _internal_set_queue_size(uint32_t value);
  public:

  // optional bool latch = 5;
  bool has_latch() const;
  private:
  bool _internal_has_latch() const;
  public:
  void clear_latch();
  bool latch() const;
  void set_latch(bool value);
  private:
  bool _internal_latch() const;
  void _internal_set_latch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.Advertise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    uint32_t queue_size_;
    bool latch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_Unadvertise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.Unadvertise) */ {
 public:
  inline Command_Unadvertise() : Command_Unadvertise(nullptr) {}
  ~Command_Unadvertise() override;
  explicit PROTOBUF_CONSTEXPR Command_Unadvertise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Unadvertise(const Command_Unadvertise& from);
  Command_Unadvertise(Command_Unadvertise&& from) noexcept
    : Command_Unadvertise() {
    *this = ::std::move(from);
  }

  inline Command_Unadvertise& operator=(const Command_Unadvertise& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Unadvertise& operator=(Command_Unadvertise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Unadvertise& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Unadvertise* internal_default_instance() {
    return reinterpret_cast<const Command_Unadvertise*>(
               &_Command_Unadvertise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Command_Unadvertise& a, Command_Unadvertise& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Unadvertise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Unadvertise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Unadvertise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Unadvertise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Unadvertise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Unadvertise& from) {
    Command_Unadvertise::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Unadvertise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.Unadvertise";
  }
  protected:
  explicit Command_Unadvertise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.Unadvertise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_Publish final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.Publish) */ {
 public:
  inline Command_Publish() : Command_Publish(nullptr) {}
  ~Command_Publish() override;
  explicit PROTOBUF_CONSTEXPR Command_Publish(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Publish(const Command_Publish& from);
  Command_Publish(Command_Publish&& from) noexcept
    : Command_Publish() {
    *this = ::std::move(from);
  }

  inline Command_Publish& operator=(const Command_Publish& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Publish& operator=(Command_Publish&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Publish& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Publish* internal_default_instance() {
    return reinterpret_cast<const Command_Publish*>(
               &_Command_Publish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Command_Publish& a, Command_Publish& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Publish* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Publish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Publish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Publish>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Publish& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Publish& from) {
    Command_Publish::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Publish* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.Publish";
  }
  protected:
  explicit Command_Publish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDataFieldNumber = 3,
    kStringDataFieldNumber = 4,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional string string_data = 4;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_data();
  PROTOBUF_NODISCARD std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.Publish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_Subscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.Subscribe) */ {
 public:
  inline Command_Subscribe() : Command_Subscribe(nullptr) {}
  ~Command_Subscribe() override;
  explicit PROTOBUF_CONSTEXPR Command_Subscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Subscribe(const Command_Subscribe& from);
  Command_Subscribe(Command_Subscribe&& from) noexcept
    : Command_Subscribe() {
    *this = ::std::move(from);
  }

  inline Command_Subscribe& operator=(const Command_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Subscribe& operator=(Command_Subscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Subscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Subscribe* internal_default_instance() {
    return reinterpret_cast<const Command_Subscribe*>(
               &_Command_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Command_Subscribe& a, Command_Subscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Subscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Subscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Subscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Subscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Subscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Subscribe& from) {
    Command_Subscribe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Subscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.Subscribe";
  }
  protected:
  explicit Command_Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kTypeFieldNumber = 2,
    kQueueSizeFieldNumber = 3,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional uint32 queue_size = 3;
  bool has_queue_size() const;
  private:
  bool _internal_has_queue_size() const;
  public:
  void clear_queue_size();
  uint32_t queue_size() const;
  void set_queue_size(uint32_t value);
  private:
  uint32_t _internal_queue_size() const;
  void _internal_set_queue_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.Subscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    uint32_t queue_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_Unsubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.Unsubscribe) */ {
 public:
  inline Command_Unsubscribe() : Command_Unsubscribe(nullptr) {}
  ~Command_Unsubscribe() override;
  explicit PROTOBUF_CONSTEXPR Command_Unsubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Unsubscribe(const Command_Unsubscribe& from);
  Command_Unsubscribe(Command_Unsubscribe&& from) noexcept
    : Command_Unsubscribe() {
    *this = ::std::move(from);
  }

  inline Command_Unsubscribe& operator=(const Command_Unsubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Unsubscribe& operator=(Command_Unsubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Unsubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Unsubscribe* internal_default_instance() {
    return reinterpret_cast<const Command_Unsubscribe*>(
               &_Command_Unsubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Command_Unsubscribe& a, Command_Unsubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Unsubscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Unsubscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Unsubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Unsubscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Unsubscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Unsubscribe& from) {
    Command_Unsubscribe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Unsubscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.Unsubscribe";
  }
  protected:
  explicit Command_Unsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.Unsubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_CallService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.CallService) */ {
 public:
  inline Command_CallService() : Command_CallService(nullptr) {}
  ~Command_CallService() override;
  explicit PROTOBUF_CONSTEXPR Command_CallService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_CallService(const Command_CallService& from);
  Command_CallService(Command_CallService&& from) noexcept
    : Command_CallService() {
    *this = ::std::move(from);
  }

  inline Command_CallService& operator=(const Command_CallService& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_CallService& operator=(Command_CallService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_CallService& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_CallService* internal_default_instance() {
    return reinterpret_cast<const Command_CallService*>(
               &_Command_CallService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Command_CallService& a, Command_CallService& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_CallService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_CallService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_CallService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_CallService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_CallService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_CallService& from) {
    Command_CallService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_CallService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.CallService";
  }
  protected:
  explicit Command_CallService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kDataFieldNumber = 3,
    kStringDataFieldNumber = 4,
    kSeqFieldNumber = 5,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional string string_data = 4;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_data();
  PROTOBUF_NODISCARD std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // uint64 seq = 5;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.CallService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
    uint64_t seq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_AdvertiseService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.AdvertiseService) */ {
 public:
  inline Command_AdvertiseService() : Command_AdvertiseService(nullptr) {}
  ~Command_AdvertiseService() override;
  explicit PROTOBUF_CONSTEXPR Command_AdvertiseService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_AdvertiseService(const Command_AdvertiseService& from);
  Command_AdvertiseService(Command_AdvertiseService&& from) noexcept
    : Command_AdvertiseService() {
    *this = ::std::move(from);
  }

  inline Command_AdvertiseService& operator=(const Command_AdvertiseService& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_AdvertiseService& operator=(Command_AdvertiseService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_AdvertiseService& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_AdvertiseService* internal_default_instance() {
    return reinterpret_cast<const Command_AdvertiseService*>(
               &_Command_AdvertiseService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Command_AdvertiseService& a, Command_AdvertiseService& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_AdvertiseService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_AdvertiseService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_AdvertiseService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_AdvertiseService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_AdvertiseService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_AdvertiseService& from) {
    Command_AdvertiseService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_AdvertiseService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.AdvertiseService";
  }
  protected:
  explicit Command_AdvertiseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.AdvertiseService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_UnadvertiseService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.UnadvertiseService) */ {
 public:
  inline Command_UnadvertiseService() : Command_UnadvertiseService(nullptr) {}
  ~Command_UnadvertiseService() override;
  explicit PROTOBUF_CONSTEXPR Command_UnadvertiseService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_UnadvertiseService(const Command_UnadvertiseService& from);
  Command_UnadvertiseService(Command_UnadvertiseService&& from) noexcept
    : Command_UnadvertiseService() {
    *this = ::std::move(from);
  }

  inline Command_UnadvertiseService& operator=(const Command_UnadvertiseService& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_UnadvertiseService& operator=(Command_UnadvertiseService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_UnadvertiseService& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_UnadvertiseService* internal_default_instance() {
    return reinterpret_cast<const Command_UnadvertiseService*>(
               &_Command_UnadvertiseService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Command_UnadvertiseService& a, Command_UnadvertiseService& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_UnadvertiseService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_UnadvertiseService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_UnadvertiseService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_UnadvertiseService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_UnadvertiseService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_UnadvertiseService& from) {
    Command_UnadvertiseService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_UnadvertiseService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.UnadvertiseService";
  }
  protected:
  explicit Command_UnadvertiseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.UnadvertiseService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_ResponseService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.ResponseService) */ {
 public:
  inline Command_ResponseService() : Command_ResponseService(nullptr) {}
  ~Command_ResponseService() override;
  explicit PROTOBUF_CONSTEXPR Command_ResponseService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_ResponseService(const Command_ResponseService& from);
  Command_ResponseService(Command_ResponseService&& from) noexcept
    : Command_ResponseService() {
    *this = ::std::move(from);
  }

  inline Command_ResponseService& operator=(const Command_ResponseService& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_ResponseService& operator=(Command_ResponseService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_ResponseService& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_ResponseService* internal_default_instance() {
    return reinterpret_cast<const Command_ResponseService*>(
               &_Command_ResponseService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Command_ResponseService& a, Command_ResponseService& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_ResponseService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_ResponseService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_ResponseService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_ResponseService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_ResponseService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_ResponseService& from) {
    Command_ResponseService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_ResponseService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.ResponseService";
  }
  protected:
  explicit Command_ResponseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kDataFieldNumber = 2,
    kStringDataFieldNumber = 3,
    kSeqFieldNumber = 4,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional string string_data = 3;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_data();
  PROTOBUF_NODISCARD std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // uint64 seq = 4;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.ResponseService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
    uint64_t seq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command_Log final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command.Log) */ {
 public:
  inline Command_Log() : Command_Log(nullptr) {}
  ~Command_Log() override;
  explicit PROTOBUF_CONSTEXPR Command_Log(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Log(const Command_Log& from);
  Command_Log(Command_Log&& from) noexcept
    : Command_Log() {
    *this = ::std::move(from);
  }

  inline Command_Log& operator=(const Command_Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Log& operator=(Command_Log&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Log& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Log* internal_default_instance() {
    return reinterpret_cast<const Command_Log*>(
               &_Command_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Command_Log& a, Command_Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Log* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Log* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Log>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Log& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Log& from) {
    Command_Log::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Log* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command.Log";
  }
  protected:
  explicit Command_Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_Log_Level Level;
  static constexpr Level DEBUG =
    Command_Log_Level_DEBUG;
  static constexpr Level INFO =
    Command_Log_Level_INFO;
  static constexpr Level WARN =
    Command_Log_Level_WARN;
  static constexpr Level ERROR =
    Command_Log_Level_ERROR;
  static constexpr Level FATAL =
    Command_Log_Level_FATAL;
  static inline bool Level_IsValid(int value) {
    return Command_Log_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    Command_Log_Level_Level_MIN;
  static constexpr Level Level_MAX =
    Command_Log_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    Command_Log_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Level_descriptor() {
    return Command_Log_Level_descriptor();
  }
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return Command_Log_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Level* value) {
    return Command_Log_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kTimeFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .hybrid.Command.Log.Level level = 1;
  void clear_level();
  ::hybrid::Command_Log_Level level() const;
  void set_level(::hybrid::Command_Log_Level value);
  private:
  ::hybrid::Command_Log_Level _internal_level() const;
  void _internal_set_level(::hybrid::Command_Log_Level value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command.Log)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    int level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command& from) {
    Command::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_Advertise Advertise;
  typedef Command_Unadvertise Unadvertise;
  typedef Command_Publish Publish;
  typedef Command_Subscribe Subscribe;
  typedef Command_Unsubscribe Unsubscribe;
  typedef Command_CallService CallService;
  typedef Command_AdvertiseService AdvertiseService;
  typedef Command_UnadvertiseService UnadvertiseService;
  typedef Command_ResponseService ResponseService;
  typedef Command_Log Log;

  typedef Command_Type Type;
  static constexpr Type UNKNOWN =
    Command_Type_UNKNOWN;
  static constexpr Type ADVERTISE =
    Command_Type_ADVERTISE;
  static constexpr Type PUBLISH =
    Command_Type_PUBLISH;
  static constexpr Type UNADVERTISE =
    Command_Type_UNADVERTISE;
  static constexpr Type SUBSCRIBE =
    Command_Type_SUBSCRIBE;
  static constexpr Type UNSUBSCRIBE =
    Command_Type_UNSUBSCRIBE;
  static constexpr Type ADVERTISE_SERVICE =
    Command_Type_ADVERTISE_SERVICE;
  static constexpr Type CALL_SERVICE =
    Command_Type_CALL_SERVICE;
  static constexpr Type RESPONSE_SERVICE =
    Command_Type_RESPONSE_SERVICE;
  static constexpr Type UNADVERTISE_SERVICE =
    Command_Type_UNADVERTISE_SERVICE;
  static constexpr Type LOG =
    Command_Type_LOG;
  static constexpr Type PING =
    Command_Type_PING;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Command_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Command_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Command_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdvertiseFieldNumber = 2,
    kPublishFieldNumber = 3,
    kUnadvertiseFieldNumber = 4,
    kSubscribeFieldNumber = 5,
    kUnsubscribeFieldNumber = 6,
    kAdvertiseServiceFieldNumber = 7,
    kCallServiceFieldNumber = 8,
    kResponseServiceFieldNumber = 9,
    kUnadvertiseServiceFieldNumber = 10,
    kLogFieldNumber = 11,
    kTypeFieldNumber = 1,
  };
  // optional .hybrid.Command.Advertise advertise = 2;
  bool has_advertise() const;
  private:
  bool _internal_has_advertise() const;
  public:
  void clear_advertise();
  const ::hybrid::Command_Advertise& advertise() const;
  PROTOBUF_NODISCARD ::hybrid::Command_Advertise* release_advertise();
  ::hybrid::Command_Advertise* mutable_advertise();
  void set_allocated_advertise(::hybrid::Command_Advertise* advertise);
  private:
  const ::hybrid::Command_Advertise& _internal_advertise() const;
  ::hybrid::Command_Advertise* _internal_mutable_advertise();
  public:
  void unsafe_arena_set_allocated_advertise(
      ::hybrid::Command_Advertise* advertise);
  ::hybrid::Command_Advertise* unsafe_arena_release_advertise();

  // optional .hybrid.Command.Publish publish = 3;
  bool has_publish() const;
  private:
  bool _internal_has_publish() const;
  public:
  void clear_publish();
  const ::hybrid::Command_Publish& publish() const;
  PROTOBUF_NODISCARD ::hybrid::Command_Publish* release_publish();
  ::hybrid::Command_Publish* mutable_publish();
  void set_allocated_publish(::hybrid::Command_Publish* publish);
  private:
  const ::hybrid::Command_Publish& _internal_publish() const;
  ::hybrid::Command_Publish* _internal_mutable_publish();
  public:
  void unsafe_arena_set_allocated_publish(
      ::hybrid::Command_Publish* publish);
  ::hybrid::Command_Publish* unsafe_arena_release_publish();

  // optional .hybrid.Command.Unadvertise unadvertise = 4;
  bool has_unadvertise() const;
  private:
  bool _internal_has_unadvertise() const;
  public:
  void clear_unadvertise();
  const ::hybrid::Command_Unadvertise& unadvertise() const;
  PROTOBUF_NODISCARD ::hybrid::Command_Unadvertise* release_unadvertise();
  ::hybrid::Command_Unadvertise* mutable_unadvertise();
  void set_allocated_unadvertise(::hybrid::Command_Unadvertise* unadvertise);
  private:
  const ::hybrid::Command_Unadvertise& _internal_unadvertise() const;
  ::hybrid::Command_Unadvertise* _internal_mutable_unadvertise();
  public:
  void unsafe_arena_set_allocated_unadvertise(
      ::hybrid::Command_Unadvertise* unadvertise);
  ::hybrid::Command_Unadvertise* unsafe_arena_release_unadvertise();

  // optional .hybrid.Command.Subscribe subscribe = 5;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  const ::hybrid::Command_Subscribe& subscribe() const;
  PROTOBUF_NODISCARD ::hybrid::Command_Subscribe* release_subscribe();
  ::hybrid::Command_Subscribe* mutable_subscribe();
  void set_allocated_subscribe(::hybrid::Command_Subscribe* subscribe);
  private:
  const ::hybrid::Command_Subscribe& _internal_subscribe() const;
  ::hybrid::Command_Subscribe* _internal_mutable_subscribe();
  public:
  void unsafe_arena_set_allocated_subscribe(
      ::hybrid::Command_Subscribe* subscribe);
  ::hybrid::Command_Subscribe* unsafe_arena_release_subscribe();

  // optional .hybrid.Command.Unsubscribe unsubscribe = 6;
  bool has_unsubscribe() const;
  private:
  bool _internal_has_unsubscribe() const;
  public:
  void clear_unsubscribe();
  const ::hybrid::Command_Unsubscribe& unsubscribe() const;
  PROTOBUF_NODISCARD ::hybrid::Command_Unsubscribe* release_unsubscribe();
  ::hybrid::Command_Unsubscribe* mutable_unsubscribe();
  void set_allocated_unsubscribe(::hybrid::Command_Unsubscribe* unsubscribe);
  private:
  const ::hybrid::Command_Unsubscribe& _internal_unsubscribe() const;
  ::hybrid::Command_Unsubscribe* _internal_mutable_unsubscribe();
  public:
  void unsafe_arena_set_allocated_unsubscribe(
      ::hybrid::Command_Unsubscribe* unsubscribe);
  ::hybrid::Command_Unsubscribe* unsafe_arena_release_unsubscribe();

  // optional .hybrid.Command.AdvertiseService advertise_service = 7;
  bool has_advertise_service() const;
  private:
  bool _internal_has_advertise_service() const;
  public:
  void clear_advertise_service();
  const ::hybrid::Command_AdvertiseService& advertise_service() const;
  PROTOBUF_NODISCARD ::hybrid::Command_AdvertiseService* release_advertise_service();
  ::hybrid::Command_AdvertiseService* mutable_advertise_service();
  void set_allocated_advertise_service(::hybrid::Command_AdvertiseService* advertise_service);
  private:
  const ::hybrid::Command_AdvertiseService& _internal_advertise_service() const;
  ::hybrid::Command_AdvertiseService* _internal_mutable_advertise_service();
  public:
  void unsafe_arena_set_allocated_advertise_service(
      ::hybrid::Command_AdvertiseService* advertise_service);
  ::hybrid::Command_AdvertiseService* unsafe_arena_release_advertise_service();

  // optional .hybrid.Command.CallService call_service = 8;
  bool has_call_service() const;
  private:
  bool _internal_has_call_service() const;
  public:
  void clear_call_service();
  const ::hybrid::Command_CallService& call_service() const;
  PROTOBUF_NODISCARD ::hybrid::Command_CallService* release_call_service();
  ::hybrid::Command_CallService* mutable_call_service();
  void set_allocated_call_service(::hybrid::Command_CallService* call_service);
  private:
  const ::hybrid::Command_CallService& _internal_call_service() const;
  ::hybrid::Command_CallService* _internal_mutable_call_service();
  public:
  void unsafe_arena_set_allocated_call_service(
      ::hybrid::Command_CallService* call_service);
  ::hybrid::Command_CallService* unsafe_arena_release_call_service();

  // optional .hybrid.Command.ResponseService response_service = 9;
  bool has_response_service() const;
  private:
  bool _internal_has_response_service() const;
  public:
  void clear_response_service();
  const ::hybrid::Command_ResponseService& response_service() const;
  PROTOBUF_NODISCARD ::hybrid::Command_ResponseService* release_response_service();
  ::hybrid::Command_ResponseService* mutable_response_service();
  void set_allocated_response_service(::hybrid::Command_ResponseService* response_service);
  private:
  const ::hybrid::Command_ResponseService& _internal_response_service() const;
  ::hybrid::Command_ResponseService* _internal_mutable_response_service();
  public:
  void unsafe_arena_set_allocated_response_service(
      ::hybrid::Command_ResponseService* response_service);
  ::hybrid::Command_ResponseService* unsafe_arena_release_response_service();

  // optional .hybrid.Command.UnadvertiseService unadvertise_service = 10;
  bool has_unadvertise_service() const;
  private:
  bool _internal_has_unadvertise_service() const;
  public:
  void clear_unadvertise_service();
  const ::hybrid::Command_UnadvertiseService& unadvertise_service() const;
  PROTOBUF_NODISCARD ::hybrid::Command_UnadvertiseService* release_unadvertise_service();
  ::hybrid::Command_UnadvertiseService* mutable_unadvertise_service();
  void set_allocated_unadvertise_service(::hybrid::Command_UnadvertiseService* unadvertise_service);
  private:
  const ::hybrid::Command_UnadvertiseService& _internal_unadvertise_service() const;
  ::hybrid::Command_UnadvertiseService* _internal_mutable_unadvertise_service();
  public:
  void unsafe_arena_set_allocated_unadvertise_service(
      ::hybrid::Command_UnadvertiseService* unadvertise_service);
  ::hybrid::Command_UnadvertiseService* unsafe_arena_release_unadvertise_service();

  // optional .hybrid.Command.Log log = 11;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::hybrid::Command_Log& log() const;
  PROTOBUF_NODISCARD ::hybrid::Command_Log* release_log();
  ::hybrid::Command_Log* mutable_log();
  void set_allocated_log(::hybrid::Command_Log* log);
  private:
  const ::hybrid::Command_Log& _internal_log() const;
  ::hybrid::Command_Log* _internal_mutable_log();
  public:
  void unsafe_arena_set_allocated_log(
      ::hybrid::Command_Log* log);
  ::hybrid::Command_Log* unsafe_arena_release_log();

  // .hybrid.Command.Type type = 1;
  void clear_type();
  ::hybrid::Command_Type type() const;
  void set_type(::hybrid::Command_Type value);
  private:
  ::hybrid::Command_Type _internal_type() const;
  void _internal_set_type(::hybrid::Command_Type value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::hybrid::Command_Advertise* advertise_;
    ::hybrid::Command_Publish* publish_;
    ::hybrid::Command_Unadvertise* unadvertise_;
    ::hybrid::Command_Subscribe* subscribe_;
    ::hybrid::Command_Unsubscribe* unsubscribe_;
    ::hybrid::Command_AdvertiseService* advertise_service_;
    ::hybrid::Command_CallService* call_service_;
    ::hybrid::Command_ResponseService* response_service_;
    ::hybrid::Command_UnadvertiseService* unadvertise_service_;
    ::hybrid::Command_Log* log_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_Advertise

// string topic = 1;
inline void Command_Advertise::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Command_Advertise::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Advertise.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Advertise::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Advertise.topic)
}
inline std::string* Command_Advertise::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Advertise.topic)
  return _s;
}
inline const std::string& Command_Advertise::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Command_Advertise::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Advertise::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Advertise::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Advertise.topic)
  return _impl_.topic_.Release();
}
inline void Command_Advertise::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Advertise.topic)
}

// string type = 2;
inline void Command_Advertise::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Command_Advertise::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Advertise.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Advertise::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Advertise.type)
}
inline std::string* Command_Advertise::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Advertise.type)
  return _s;
}
inline const std::string& Command_Advertise::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Command_Advertise::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Advertise::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Advertise::release_type() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Advertise.type)
  return _impl_.type_.Release();
}
inline void Command_Advertise::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Advertise.type)
}

// optional uint32 queue_size = 4;
inline bool Command_Advertise::_internal_has_queue_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Command_Advertise::has_queue_size() const {
  return _internal_has_queue_size();
}
inline void Command_Advertise::clear_queue_size() {
  _impl_.queue_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Command_Advertise::_internal_queue_size() const {
  return _impl_.queue_size_;
}
inline uint32_t Command_Advertise::queue_size() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Advertise.queue_size)
  return _internal_queue_size();
}
inline void Command_Advertise::_internal_set_queue_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.queue_size_ = value;
}
inline void Command_Advertise::set_queue_size(uint32_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:hybrid.Command.Advertise.queue_size)
}

// optional bool latch = 5;
inline bool Command_Advertise::_internal_has_latch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Command_Advertise::has_latch() const {
  return _internal_has_latch();
}
inline void Command_Advertise::clear_latch() {
  _impl_.latch_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Command_Advertise::_internal_latch() const {
  return _impl_.latch_;
}
inline bool Command_Advertise::latch() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Advertise.latch)
  return _internal_latch();
}
inline void Command_Advertise::_internal_set_latch(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.latch_ = value;
}
inline void Command_Advertise::set_latch(bool value) {
  _internal_set_latch(value);
  // @@protoc_insertion_point(field_set:hybrid.Command.Advertise.latch)
}

// -------------------------------------------------------------------

// Command_Unadvertise

// string topic = 1;
inline void Command_Unadvertise::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Command_Unadvertise::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Unadvertise.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Unadvertise::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Unadvertise.topic)
}
inline std::string* Command_Unadvertise::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Unadvertise.topic)
  return _s;
}
inline const std::string& Command_Unadvertise::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Command_Unadvertise::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Unadvertise::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Unadvertise::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Unadvertise.topic)
  return _impl_.topic_.Release();
}
inline void Command_Unadvertise::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Unadvertise.topic)
}

// -------------------------------------------------------------------

// Command_Publish

// string topic = 1;
inline void Command_Publish::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Command_Publish::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Publish.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Publish::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Publish.topic)
}
inline std::string* Command_Publish::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Publish.topic)
  return _s;
}
inline const std::string& Command_Publish::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Command_Publish::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Publish::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Publish::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Publish.topic)
  return _impl_.topic_.Release();
}
inline void Command_Publish::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Publish.topic)
}

// string type = 2;
inline void Command_Publish::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Command_Publish::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Publish.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Publish::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Publish.type)
}
inline std::string* Command_Publish::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Publish.type)
  return _s;
}
inline const std::string& Command_Publish::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Command_Publish::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Publish::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Publish::release_type() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Publish.type)
  return _impl_.type_.Release();
}
inline void Command_Publish::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Publish.type)
}

// bytes data = 3;
inline void Command_Publish::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Command_Publish::data() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Publish.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Publish::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Publish.data)
}
inline std::string* Command_Publish::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Publish.data)
  return _s;
}
inline const std::string& Command_Publish::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Command_Publish::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Publish::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Publish::release_data() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Publish.data)
  return _impl_.data_.Release();
}
inline void Command_Publish::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Publish.data)
}

// optional string string_data = 4;
inline bool Command_Publish::_internal_has_string_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Command_Publish::has_string_data() const {
  return _internal_has_string_data();
}
inline void Command_Publish::clear_string_data() {
  _impl_.string_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Command_Publish::string_data() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Publish.string_data)
  return _internal_string_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Publish::set_string_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.string_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Publish.string_data)
}
inline std::string* Command_Publish::mutable_string_data() {
  std::string* _s = _internal_mutable_string_data();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Publish.string_data)
  return _s;
}
inline const std::string& Command_Publish::_internal_string_data() const {
  return _impl_.string_data_.Get();
}
inline void Command_Publish::_internal_set_string_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Publish::_internal_mutable_string_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Publish::release_string_data() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Publish.string_data)
  if (!_internal_has_string_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.string_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_data_.IsDefault()) {
    _impl_.string_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Command_Publish::set_allocated_string_data(std::string* string_data) {
  if (string_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_data_.SetAllocated(string_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_data_.IsDefault()) {
    _impl_.string_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Publish.string_data)
}

// -------------------------------------------------------------------

// Command_Subscribe

// string topic = 1;
inline void Command_Subscribe::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Command_Subscribe::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Subscribe.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Subscribe::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Subscribe.topic)
}
inline std::string* Command_Subscribe::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Subscribe.topic)
  return _s;
}
inline const std::string& Command_Subscribe::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Command_Subscribe::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Subscribe::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Subscribe::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Subscribe.topic)
  return _impl_.topic_.Release();
}
inline void Command_Subscribe::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Subscribe.topic)
}

// string type = 2;
inline void Command_Subscribe::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Command_Subscribe::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Subscribe.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Subscribe::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Subscribe.type)
}
inline std::string* Command_Subscribe::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Subscribe.type)
  return _s;
}
inline const std::string& Command_Subscribe::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Command_Subscribe::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Subscribe::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Subscribe::release_type() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Subscribe.type)
  return _impl_.type_.Release();
}
inline void Command_Subscribe::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Subscribe.type)
}

// optional uint32 queue_size = 3;
inline bool Command_Subscribe::_internal_has_queue_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Command_Subscribe::has_queue_size() const {
  return _internal_has_queue_size();
}
inline void Command_Subscribe::clear_queue_size() {
  _impl_.queue_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Command_Subscribe::_internal_queue_size() const {
  return _impl_.queue_size_;
}
inline uint32_t Command_Subscribe::queue_size() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Subscribe.queue_size)
  return _internal_queue_size();
}
inline void Command_Subscribe::_internal_set_queue_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.queue_size_ = value;
}
inline void Command_Subscribe::set_queue_size(uint32_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:hybrid.Command.Subscribe.queue_size)
}

// -------------------------------------------------------------------

// Command_Unsubscribe

// string topic = 1;
inline void Command_Unsubscribe::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Command_Unsubscribe::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Unsubscribe.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Unsubscribe::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Unsubscribe.topic)
}
inline std::string* Command_Unsubscribe::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Unsubscribe.topic)
  return _s;
}
inline const std::string& Command_Unsubscribe::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Command_Unsubscribe::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Unsubscribe::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Unsubscribe::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Unsubscribe.topic)
  return _impl_.topic_.Release();
}
inline void Command_Unsubscribe::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Unsubscribe.topic)
}

// -------------------------------------------------------------------

// Command_CallService

// string service = 1;
inline void Command_CallService::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& Command_CallService::service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.CallService.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_CallService::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.CallService.service)
}
inline std::string* Command_CallService::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.CallService.service)
  return _s;
}
inline const std::string& Command_CallService::_internal_service() const {
  return _impl_.service_.Get();
}
inline void Command_CallService::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_CallService::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_CallService::release_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.CallService.service)
  return _impl_.service_.Release();
}
inline void Command_CallService::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.CallService.service)
}

// bytes data = 3;
inline void Command_CallService::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Command_CallService::data() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.CallService.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_CallService::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.CallService.data)
}
inline std::string* Command_CallService::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.CallService.data)
  return _s;
}
inline const std::string& Command_CallService::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Command_CallService::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_CallService::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_CallService::release_data() {
  // @@protoc_insertion_point(field_release:hybrid.Command.CallService.data)
  return _impl_.data_.Release();
}
inline void Command_CallService::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.CallService.data)
}

// optional string string_data = 4;
inline bool Command_CallService::_internal_has_string_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Command_CallService::has_string_data() const {
  return _internal_has_string_data();
}
inline void Command_CallService::clear_string_data() {
  _impl_.string_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Command_CallService::string_data() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.CallService.string_data)
  return _internal_string_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_CallService::set_string_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.string_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.CallService.string_data)
}
inline std::string* Command_CallService::mutable_string_data() {
  std::string* _s = _internal_mutable_string_data();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.CallService.string_data)
  return _s;
}
inline const std::string& Command_CallService::_internal_string_data() const {
  return _impl_.string_data_.Get();
}
inline void Command_CallService::_internal_set_string_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_CallService::_internal_mutable_string_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_CallService::release_string_data() {
  // @@protoc_insertion_point(field_release:hybrid.Command.CallService.string_data)
  if (!_internal_has_string_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.string_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_data_.IsDefault()) {
    _impl_.string_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Command_CallService::set_allocated_string_data(std::string* string_data) {
  if (string_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_data_.SetAllocated(string_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_data_.IsDefault()) {
    _impl_.string_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.CallService.string_data)
}

// uint64 seq = 5;
inline void Command_CallService::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t Command_CallService::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t Command_CallService::seq() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.CallService.seq)
  return _internal_seq();
}
inline void Command_CallService::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void Command_CallService::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:hybrid.Command.CallService.seq)
}

// -------------------------------------------------------------------

// Command_AdvertiseService

// string service = 1;
inline void Command_AdvertiseService::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& Command_AdvertiseService::service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.AdvertiseService.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_AdvertiseService::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.AdvertiseService.service)
}
inline std::string* Command_AdvertiseService::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.AdvertiseService.service)
  return _s;
}
inline const std::string& Command_AdvertiseService::_internal_service() const {
  return _impl_.service_.Get();
}
inline void Command_AdvertiseService::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_AdvertiseService::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_AdvertiseService::release_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.AdvertiseService.service)
  return _impl_.service_.Release();
}
inline void Command_AdvertiseService::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.AdvertiseService.service)
}

// string type = 2;
inline void Command_AdvertiseService::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Command_AdvertiseService::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.AdvertiseService.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_AdvertiseService::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.AdvertiseService.type)
}
inline std::string* Command_AdvertiseService::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.AdvertiseService.type)
  return _s;
}
inline const std::string& Command_AdvertiseService::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Command_AdvertiseService::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_AdvertiseService::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_AdvertiseService::release_type() {
  // @@protoc_insertion_point(field_release:hybrid.Command.AdvertiseService.type)
  return _impl_.type_.Release();
}
inline void Command_AdvertiseService::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.AdvertiseService.type)
}

// -------------------------------------------------------------------

// Command_UnadvertiseService

// string service = 1;
inline void Command_UnadvertiseService::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& Command_UnadvertiseService::service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.UnadvertiseService.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_UnadvertiseService::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.UnadvertiseService.service)
}
inline std::string* Command_UnadvertiseService::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.UnadvertiseService.service)
  return _s;
}
inline const std::string& Command_UnadvertiseService::_internal_service() const {
  return _impl_.service_.Get();
}
inline void Command_UnadvertiseService::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_UnadvertiseService::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_UnadvertiseService::release_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.UnadvertiseService.service)
  return _impl_.service_.Release();
}
inline void Command_UnadvertiseService::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.UnadvertiseService.service)
}

// -------------------------------------------------------------------

// Command_ResponseService

// string service = 1;
inline void Command_ResponseService::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& Command_ResponseService::service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.ResponseService.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_ResponseService::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.ResponseService.service)
}
inline std::string* Command_ResponseService::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.ResponseService.service)
  return _s;
}
inline const std::string& Command_ResponseService::_internal_service() const {
  return _impl_.service_.Get();
}
inline void Command_ResponseService::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_ResponseService::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_ResponseService::release_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.ResponseService.service)
  return _impl_.service_.Release();
}
inline void Command_ResponseService::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.ResponseService.service)
}

// bytes data = 2;
inline void Command_ResponseService::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Command_ResponseService::data() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.ResponseService.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_ResponseService::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.ResponseService.data)
}
inline std::string* Command_ResponseService::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.ResponseService.data)
  return _s;
}
inline const std::string& Command_ResponseService::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Command_ResponseService::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_ResponseService::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_ResponseService::release_data() {
  // @@protoc_insertion_point(field_release:hybrid.Command.ResponseService.data)
  return _impl_.data_.Release();
}
inline void Command_ResponseService::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.ResponseService.data)
}

// optional string string_data = 3;
inline bool Command_ResponseService::_internal_has_string_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Command_ResponseService::has_string_data() const {
  return _internal_has_string_data();
}
inline void Command_ResponseService::clear_string_data() {
  _impl_.string_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Command_ResponseService::string_data() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.ResponseService.string_data)
  return _internal_string_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_ResponseService::set_string_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.string_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.ResponseService.string_data)
}
inline std::string* Command_ResponseService::mutable_string_data() {
  std::string* _s = _internal_mutable_string_data();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.ResponseService.string_data)
  return _s;
}
inline const std::string& Command_ResponseService::_internal_string_data() const {
  return _impl_.string_data_.Get();
}
inline void Command_ResponseService::_internal_set_string_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_ResponseService::_internal_mutable_string_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_ResponseService::release_string_data() {
  // @@protoc_insertion_point(field_release:hybrid.Command.ResponseService.string_data)
  if (!_internal_has_string_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.string_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_data_.IsDefault()) {
    _impl_.string_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Command_ResponseService::set_allocated_string_data(std::string* string_data) {
  if (string_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_data_.SetAllocated(string_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_data_.IsDefault()) {
    _impl_.string_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.ResponseService.string_data)
}

// uint64 seq = 4;
inline void Command_ResponseService::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t Command_ResponseService::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t Command_ResponseService::seq() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.ResponseService.seq)
  return _internal_seq();
}
inline void Command_ResponseService::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void Command_ResponseService::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:hybrid.Command.ResponseService.seq)
}

// -------------------------------------------------------------------

// Command_Log

// .hybrid.Command.Log.Level level = 1;
inline void Command_Log::clear_level() {
  _impl_.level_ = 0;
}
inline ::hybrid::Command_Log_Level Command_Log::_internal_level() const {
  return static_cast< ::hybrid::Command_Log_Level >(_impl_.level_);
}
inline ::hybrid::Command_Log_Level Command_Log::level() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Log.level)
  return _internal_level();
}
inline void Command_Log::_internal_set_level(::hybrid::Command_Log_Level value) {
  
  _impl_.level_ = value;
}
inline void Command_Log::set_level(::hybrid::Command_Log_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:hybrid.Command.Log.level)
}

// .google.protobuf.Timestamp time = 2;
inline bool Command_Log::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool Command_Log::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Command_Log::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Command_Log::time() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Log.time)
  return _internal_time();
}
inline void Command_Log::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.Log.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Command_Log::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Command_Log::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Log.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Command_Log::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Command_Log::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Log.time)
  return _msg;
}
inline void Command_Log::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Log.time)
}

// string message = 3;
inline void Command_Log::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Command_Log::message() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.Log.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Log::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Command.Log.message)
}
inline std::string* Command_Log::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.Log.message)
  return _s;
}
inline const std::string& Command_Log::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Command_Log::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Log::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Log::release_message() {
  // @@protoc_insertion_point(field_release:hybrid.Command.Log.message)
  return _impl_.message_.Release();
}
inline void Command_Log::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.Log.message)
}

// -------------------------------------------------------------------

// Command

// .hybrid.Command.Type type = 1;
inline void Command::clear_type() {
  _impl_.type_ = 0;
}
inline ::hybrid::Command_Type Command::_internal_type() const {
  return static_cast< ::hybrid::Command_Type >(_impl_.type_);
}
inline ::hybrid::Command_Type Command::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.type)
  return _internal_type();
}
inline void Command::_internal_set_type(::hybrid::Command_Type value) {
  
  _impl_.type_ = value;
}
inline void Command::set_type(::hybrid::Command_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hybrid.Command.type)
}

// optional .hybrid.Command.Advertise advertise = 2;
inline bool Command::_internal_has_advertise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advertise_ != nullptr);
  return value;
}
inline bool Command::has_advertise() const {
  return _internal_has_advertise();
}
inline void Command::clear_advertise() {
  if (_impl_.advertise_ != nullptr) _impl_.advertise_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::hybrid::Command_Advertise& Command::_internal_advertise() const {
  const ::hybrid::Command_Advertise* p = _impl_.advertise_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_Advertise&>(
      ::hybrid::_Command_Advertise_default_instance_);
}
inline const ::hybrid::Command_Advertise& Command::advertise() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.advertise)
  return _internal_advertise();
}
inline void Command::unsafe_arena_set_allocated_advertise(
    ::hybrid::Command_Advertise* advertise) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advertise_);
  }
  _impl_.advertise_ = advertise;
  if (advertise) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.advertise)
}
inline ::hybrid::Command_Advertise* Command::release_advertise() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hybrid::Command_Advertise* temp = _impl_.advertise_;
  _impl_.advertise_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_Advertise* Command::unsafe_arena_release_advertise() {
  // @@protoc_insertion_point(field_release:hybrid.Command.advertise)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hybrid::Command_Advertise* temp = _impl_.advertise_;
  _impl_.advertise_ = nullptr;
  return temp;
}
inline ::hybrid::Command_Advertise* Command::_internal_mutable_advertise() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advertise_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_Advertise>(GetArenaForAllocation());
    _impl_.advertise_ = p;
  }
  return _impl_.advertise_;
}
inline ::hybrid::Command_Advertise* Command::mutable_advertise() {
  ::hybrid::Command_Advertise* _msg = _internal_mutable_advertise();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.advertise)
  return _msg;
}
inline void Command::set_allocated_advertise(::hybrid::Command_Advertise* advertise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.advertise_;
  }
  if (advertise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advertise);
    if (message_arena != submessage_arena) {
      advertise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advertise, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advertise_ = advertise;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.advertise)
}

// optional .hybrid.Command.Publish publish = 3;
inline bool Command::_internal_has_publish() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.publish_ != nullptr);
  return value;
}
inline bool Command::has_publish() const {
  return _internal_has_publish();
}
inline void Command::clear_publish() {
  if (_impl_.publish_ != nullptr) _impl_.publish_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::hybrid::Command_Publish& Command::_internal_publish() const {
  const ::hybrid::Command_Publish* p = _impl_.publish_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_Publish&>(
      ::hybrid::_Command_Publish_default_instance_);
}
inline const ::hybrid::Command_Publish& Command::publish() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.publish)
  return _internal_publish();
}
inline void Command::unsafe_arena_set_allocated_publish(
    ::hybrid::Command_Publish* publish) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publish_);
  }
  _impl_.publish_ = publish;
  if (publish) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.publish)
}
inline ::hybrid::Command_Publish* Command::release_publish() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hybrid::Command_Publish* temp = _impl_.publish_;
  _impl_.publish_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_Publish* Command::unsafe_arena_release_publish() {
  // @@protoc_insertion_point(field_release:hybrid.Command.publish)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hybrid::Command_Publish* temp = _impl_.publish_;
  _impl_.publish_ = nullptr;
  return temp;
}
inline ::hybrid::Command_Publish* Command::_internal_mutable_publish() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.publish_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_Publish>(GetArenaForAllocation());
    _impl_.publish_ = p;
  }
  return _impl_.publish_;
}
inline ::hybrid::Command_Publish* Command::mutable_publish() {
  ::hybrid::Command_Publish* _msg = _internal_mutable_publish();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.publish)
  return _msg;
}
inline void Command::set_allocated_publish(::hybrid::Command_Publish* publish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.publish_;
  }
  if (publish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(publish);
    if (message_arena != submessage_arena) {
      publish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.publish_ = publish;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.publish)
}

// optional .hybrid.Command.Unadvertise unadvertise = 4;
inline bool Command::_internal_has_unadvertise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unadvertise_ != nullptr);
  return value;
}
inline bool Command::has_unadvertise() const {
  return _internal_has_unadvertise();
}
inline void Command::clear_unadvertise() {
  if (_impl_.unadvertise_ != nullptr) _impl_.unadvertise_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::hybrid::Command_Unadvertise& Command::_internal_unadvertise() const {
  const ::hybrid::Command_Unadvertise* p = _impl_.unadvertise_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_Unadvertise&>(
      ::hybrid::_Command_Unadvertise_default_instance_);
}
inline const ::hybrid::Command_Unadvertise& Command::unadvertise() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.unadvertise)
  return _internal_unadvertise();
}
inline void Command::unsafe_arena_set_allocated_unadvertise(
    ::hybrid::Command_Unadvertise* unadvertise) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unadvertise_);
  }
  _impl_.unadvertise_ = unadvertise;
  if (unadvertise) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.unadvertise)
}
inline ::hybrid::Command_Unadvertise* Command::release_unadvertise() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::hybrid::Command_Unadvertise* temp = _impl_.unadvertise_;
  _impl_.unadvertise_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_Unadvertise* Command::unsafe_arena_release_unadvertise() {
  // @@protoc_insertion_point(field_release:hybrid.Command.unadvertise)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::hybrid::Command_Unadvertise* temp = _impl_.unadvertise_;
  _impl_.unadvertise_ = nullptr;
  return temp;
}
inline ::hybrid::Command_Unadvertise* Command::_internal_mutable_unadvertise() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.unadvertise_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_Unadvertise>(GetArenaForAllocation());
    _impl_.unadvertise_ = p;
  }
  return _impl_.unadvertise_;
}
inline ::hybrid::Command_Unadvertise* Command::mutable_unadvertise() {
  ::hybrid::Command_Unadvertise* _msg = _internal_mutable_unadvertise();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.unadvertise)
  return _msg;
}
inline void Command::set_allocated_unadvertise(::hybrid::Command_Unadvertise* unadvertise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unadvertise_;
  }
  if (unadvertise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unadvertise);
    if (message_arena != submessage_arena) {
      unadvertise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unadvertise, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.unadvertise_ = unadvertise;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.unadvertise)
}

// optional .hybrid.Command.Subscribe subscribe = 5;
inline bool Command::_internal_has_subscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_ != nullptr);
  return value;
}
inline bool Command::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void Command::clear_subscribe() {
  if (_impl_.subscribe_ != nullptr) _impl_.subscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::hybrid::Command_Subscribe& Command::_internal_subscribe() const {
  const ::hybrid::Command_Subscribe* p = _impl_.subscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_Subscribe&>(
      ::hybrid::_Command_Subscribe_default_instance_);
}
inline const ::hybrid::Command_Subscribe& Command::subscribe() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.subscribe)
  return _internal_subscribe();
}
inline void Command::unsafe_arena_set_allocated_subscribe(
    ::hybrid::Command_Subscribe* subscribe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subscribe_);
  }
  _impl_.subscribe_ = subscribe;
  if (subscribe) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.subscribe)
}
inline ::hybrid::Command_Subscribe* Command::release_subscribe() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::hybrid::Command_Subscribe* temp = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_Subscribe* Command::unsafe_arena_release_subscribe() {
  // @@protoc_insertion_point(field_release:hybrid.Command.subscribe)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::hybrid::Command_Subscribe* temp = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
  return temp;
}
inline ::hybrid::Command_Subscribe* Command::_internal_mutable_subscribe() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.subscribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_Subscribe>(GetArenaForAllocation());
    _impl_.subscribe_ = p;
  }
  return _impl_.subscribe_;
}
inline ::hybrid::Command_Subscribe* Command::mutable_subscribe() {
  ::hybrid::Command_Subscribe* _msg = _internal_mutable_subscribe();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.subscribe)
  return _msg;
}
inline void Command::set_allocated_subscribe(::hybrid::Command_Subscribe* subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subscribe_;
  }
  if (subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe);
    if (message_arena != submessage_arena) {
      subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.subscribe_ = subscribe;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.subscribe)
}

// optional .hybrid.Command.Unsubscribe unsubscribe = 6;
inline bool Command::_internal_has_unsubscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unsubscribe_ != nullptr);
  return value;
}
inline bool Command::has_unsubscribe() const {
  return _internal_has_unsubscribe();
}
inline void Command::clear_unsubscribe() {
  if (_impl_.unsubscribe_ != nullptr) _impl_.unsubscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::hybrid::Command_Unsubscribe& Command::_internal_unsubscribe() const {
  const ::hybrid::Command_Unsubscribe* p = _impl_.unsubscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_Unsubscribe&>(
      ::hybrid::_Command_Unsubscribe_default_instance_);
}
inline const ::hybrid::Command_Unsubscribe& Command::unsubscribe() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.unsubscribe)
  return _internal_unsubscribe();
}
inline void Command::unsafe_arena_set_allocated_unsubscribe(
    ::hybrid::Command_Unsubscribe* unsubscribe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsubscribe_);
  }
  _impl_.unsubscribe_ = unsubscribe;
  if (unsubscribe) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.unsubscribe)
}
inline ::hybrid::Command_Unsubscribe* Command::release_unsubscribe() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::hybrid::Command_Unsubscribe* temp = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_Unsubscribe* Command::unsafe_arena_release_unsubscribe() {
  // @@protoc_insertion_point(field_release:hybrid.Command.unsubscribe)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::hybrid::Command_Unsubscribe* temp = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
  return temp;
}
inline ::hybrid::Command_Unsubscribe* Command::_internal_mutable_unsubscribe() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.unsubscribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_Unsubscribe>(GetArenaForAllocation());
    _impl_.unsubscribe_ = p;
  }
  return _impl_.unsubscribe_;
}
inline ::hybrid::Command_Unsubscribe* Command::mutable_unsubscribe() {
  ::hybrid::Command_Unsubscribe* _msg = _internal_mutable_unsubscribe();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.unsubscribe)
  return _msg;
}
inline void Command::set_allocated_unsubscribe(::hybrid::Command_Unsubscribe* unsubscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unsubscribe_;
  }
  if (unsubscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unsubscribe);
    if (message_arena != submessage_arena) {
      unsubscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsubscribe, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.unsubscribe_ = unsubscribe;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.unsubscribe)
}

// optional .hybrid.Command.AdvertiseService advertise_service = 7;
inline bool Command::_internal_has_advertise_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advertise_service_ != nullptr);
  return value;
}
inline bool Command::has_advertise_service() const {
  return _internal_has_advertise_service();
}
inline void Command::clear_advertise_service() {
  if (_impl_.advertise_service_ != nullptr) _impl_.advertise_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::hybrid::Command_AdvertiseService& Command::_internal_advertise_service() const {
  const ::hybrid::Command_AdvertiseService* p = _impl_.advertise_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_AdvertiseService&>(
      ::hybrid::_Command_AdvertiseService_default_instance_);
}
inline const ::hybrid::Command_AdvertiseService& Command::advertise_service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.advertise_service)
  return _internal_advertise_service();
}
inline void Command::unsafe_arena_set_allocated_advertise_service(
    ::hybrid::Command_AdvertiseService* advertise_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advertise_service_);
  }
  _impl_.advertise_service_ = advertise_service;
  if (advertise_service) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.advertise_service)
}
inline ::hybrid::Command_AdvertiseService* Command::release_advertise_service() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::hybrid::Command_AdvertiseService* temp = _impl_.advertise_service_;
  _impl_.advertise_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_AdvertiseService* Command::unsafe_arena_release_advertise_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.advertise_service)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::hybrid::Command_AdvertiseService* temp = _impl_.advertise_service_;
  _impl_.advertise_service_ = nullptr;
  return temp;
}
inline ::hybrid::Command_AdvertiseService* Command::_internal_mutable_advertise_service() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.advertise_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_AdvertiseService>(GetArenaForAllocation());
    _impl_.advertise_service_ = p;
  }
  return _impl_.advertise_service_;
}
inline ::hybrid::Command_AdvertiseService* Command::mutable_advertise_service() {
  ::hybrid::Command_AdvertiseService* _msg = _internal_mutable_advertise_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.advertise_service)
  return _msg;
}
inline void Command::set_allocated_advertise_service(::hybrid::Command_AdvertiseService* advertise_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.advertise_service_;
  }
  if (advertise_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advertise_service);
    if (message_arena != submessage_arena) {
      advertise_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advertise_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.advertise_service_ = advertise_service;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.advertise_service)
}

// optional .hybrid.Command.CallService call_service = 8;
inline bool Command::_internal_has_call_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.call_service_ != nullptr);
  return value;
}
inline bool Command::has_call_service() const {
  return _internal_has_call_service();
}
inline void Command::clear_call_service() {
  if (_impl_.call_service_ != nullptr) _impl_.call_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::hybrid::Command_CallService& Command::_internal_call_service() const {
  const ::hybrid::Command_CallService* p = _impl_.call_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_CallService&>(
      ::hybrid::_Command_CallService_default_instance_);
}
inline const ::hybrid::Command_CallService& Command::call_service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.call_service)
  return _internal_call_service();
}
inline void Command::unsafe_arena_set_allocated_call_service(
    ::hybrid::Command_CallService* call_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.call_service_);
  }
  _impl_.call_service_ = call_service;
  if (call_service) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.call_service)
}
inline ::hybrid::Command_CallService* Command::release_call_service() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::hybrid::Command_CallService* temp = _impl_.call_service_;
  _impl_.call_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_CallService* Command::unsafe_arena_release_call_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.call_service)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::hybrid::Command_CallService* temp = _impl_.call_service_;
  _impl_.call_service_ = nullptr;
  return temp;
}
inline ::hybrid::Command_CallService* Command::_internal_mutable_call_service() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.call_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_CallService>(GetArenaForAllocation());
    _impl_.call_service_ = p;
  }
  return _impl_.call_service_;
}
inline ::hybrid::Command_CallService* Command::mutable_call_service() {
  ::hybrid::Command_CallService* _msg = _internal_mutable_call_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.call_service)
  return _msg;
}
inline void Command::set_allocated_call_service(::hybrid::Command_CallService* call_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.call_service_;
  }
  if (call_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(call_service);
    if (message_arena != submessage_arena) {
      call_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.call_service_ = call_service;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.call_service)
}

// optional .hybrid.Command.ResponseService response_service = 9;
inline bool Command::_internal_has_response_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_service_ != nullptr);
  return value;
}
inline bool Command::has_response_service() const {
  return _internal_has_response_service();
}
inline void Command::clear_response_service() {
  if (_impl_.response_service_ != nullptr) _impl_.response_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::hybrid::Command_ResponseService& Command::_internal_response_service() const {
  const ::hybrid::Command_ResponseService* p = _impl_.response_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_ResponseService&>(
      ::hybrid::_Command_ResponseService_default_instance_);
}
inline const ::hybrid::Command_ResponseService& Command::response_service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.response_service)
  return _internal_response_service();
}
inline void Command::unsafe_arena_set_allocated_response_service(
    ::hybrid::Command_ResponseService* response_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_service_);
  }
  _impl_.response_service_ = response_service;
  if (response_service) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.response_service)
}
inline ::hybrid::Command_ResponseService* Command::release_response_service() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::hybrid::Command_ResponseService* temp = _impl_.response_service_;
  _impl_.response_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_ResponseService* Command::unsafe_arena_release_response_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.response_service)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::hybrid::Command_ResponseService* temp = _impl_.response_service_;
  _impl_.response_service_ = nullptr;
  return temp;
}
inline ::hybrid::Command_ResponseService* Command::_internal_mutable_response_service() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.response_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_ResponseService>(GetArenaForAllocation());
    _impl_.response_service_ = p;
  }
  return _impl_.response_service_;
}
inline ::hybrid::Command_ResponseService* Command::mutable_response_service() {
  ::hybrid::Command_ResponseService* _msg = _internal_mutable_response_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.response_service)
  return _msg;
}
inline void Command::set_allocated_response_service(::hybrid::Command_ResponseService* response_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_service_;
  }
  if (response_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response_service);
    if (message_arena != submessage_arena) {
      response_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.response_service_ = response_service;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.response_service)
}

// optional .hybrid.Command.UnadvertiseService unadvertise_service = 10;
inline bool Command::_internal_has_unadvertise_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unadvertise_service_ != nullptr);
  return value;
}
inline bool Command::has_unadvertise_service() const {
  return _internal_has_unadvertise_service();
}
inline void Command::clear_unadvertise_service() {
  if (_impl_.unadvertise_service_ != nullptr) _impl_.unadvertise_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::hybrid::Command_UnadvertiseService& Command::_internal_unadvertise_service() const {
  const ::hybrid::Command_UnadvertiseService* p = _impl_.unadvertise_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_UnadvertiseService&>(
      ::hybrid::_Command_UnadvertiseService_default_instance_);
}
inline const ::hybrid::Command_UnadvertiseService& Command::unadvertise_service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.unadvertise_service)
  return _internal_unadvertise_service();
}
inline void Command::unsafe_arena_set_allocated_unadvertise_service(
    ::hybrid::Command_UnadvertiseService* unadvertise_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unadvertise_service_);
  }
  _impl_.unadvertise_service_ = unadvertise_service;
  if (unadvertise_service) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.unadvertise_service)
}
inline ::hybrid::Command_UnadvertiseService* Command::release_unadvertise_service() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::hybrid::Command_UnadvertiseService* temp = _impl_.unadvertise_service_;
  _impl_.unadvertise_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_UnadvertiseService* Command::unsafe_arena_release_unadvertise_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.unadvertise_service)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::hybrid::Command_UnadvertiseService* temp = _impl_.unadvertise_service_;
  _impl_.unadvertise_service_ = nullptr;
  return temp;
}
inline ::hybrid::Command_UnadvertiseService* Command::_internal_mutable_unadvertise_service() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.unadvertise_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_UnadvertiseService>(GetArenaForAllocation());
    _impl_.unadvertise_service_ = p;
  }
  return _impl_.unadvertise_service_;
}
inline ::hybrid::Command_UnadvertiseService* Command::mutable_unadvertise_service() {
  ::hybrid::Command_UnadvertiseService* _msg = _internal_mutable_unadvertise_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.unadvertise_service)
  return _msg;
}
inline void Command::set_allocated_unadvertise_service(::hybrid::Command_UnadvertiseService* unadvertise_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unadvertise_service_;
  }
  if (unadvertise_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unadvertise_service);
    if (message_arena != submessage_arena) {
      unadvertise_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unadvertise_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.unadvertise_service_ = unadvertise_service;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.unadvertise_service)
}

// optional .hybrid.Command.Log log = 11;
inline bool Command::_internal_has_log() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.log_ != nullptr);
  return value;
}
inline bool Command::has_log() const {
  return _internal_has_log();
}
inline void Command::clear_log() {
  if (_impl_.log_ != nullptr) _impl_.log_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::hybrid::Command_Log& Command::_internal_log() const {
  const ::hybrid::Command_Log* p = _impl_.log_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Command_Log&>(
      ::hybrid::_Command_Log_default_instance_);
}
inline const ::hybrid::Command_Log& Command::log() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.log)
  return _internal_log();
}
inline void Command::unsafe_arena_set_allocated_log(
    ::hybrid::Command_Log* log) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_);
  }
  _impl_.log_ = log;
  if (log) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.log)
}
inline ::hybrid::Command_Log* Command::release_log() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::hybrid::Command_Log* temp = _impl_.log_;
  _impl_.log_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Command_Log* Command::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_release:hybrid.Command.log)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::hybrid::Command_Log* temp = _impl_.log_;
  _impl_.log_ = nullptr;
  return temp;
}
inline ::hybrid::Command_Log* Command::_internal_mutable_log() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.log_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Command_Log>(GetArenaForAllocation());
    _impl_.log_ = p;
  }
  return _impl_.log_;
}
inline ::hybrid::Command_Log* Command::mutable_log() {
  ::hybrid::Command_Log* _msg = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.log)
  return _msg;
}
inline void Command::set_allocated_log(::hybrid::Command_Log* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.log_;
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.log_ = log;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.log)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hybrid

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hybrid::Command_Log_Level> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hybrid::Command_Log_Level>() {
  return ::hybrid::Command_Log_Level_descriptor();
}
template <> struct is_proto_enum< ::hybrid::Command_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hybrid::Command_Type>() {
  return ::hybrid::Command_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Command_2eproto
