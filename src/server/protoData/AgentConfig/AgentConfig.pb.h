// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AgentConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AgentConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AgentConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AgentConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AgentConfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AgentConfig_2eproto;
namespace hybrid {
class AgentConfig;
struct AgentConfigDefaultTypeInternal;
extern AgentConfigDefaultTypeInternal _AgentConfig_default_instance_;
}  // namespace hybrid
PROTOBUF_NAMESPACE_OPEN
template<> ::hybrid::AgentConfig* Arena::CreateMaybeMessage<::hybrid::AgentConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hybrid {

// ===================================================================

class AgentConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.AgentConfig) */ {
 public:
  inline AgentConfig() : AgentConfig(nullptr) {}
  ~AgentConfig() override;
  explicit PROTOBUF_CONSTEXPR AgentConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentConfig(const AgentConfig& from);
  AgentConfig(AgentConfig&& from) noexcept
    : AgentConfig() {
    *this = ::std::move(from);
  }

  inline AgentConfig& operator=(const AgentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentConfig& operator=(AgentConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentConfig* internal_default_instance() {
    return reinterpret_cast<const AgentConfig*>(
               &_AgentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AgentConfig& a, AgentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentConfig& from) {
    AgentConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.AgentConfig";
  }
  protected:
  explicit AgentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kDelimiterFieldNumber = 4,
    kLogLevelFieldNumber = 2,
    kIsProtobufFieldNumber = 3,
  };
  // string node = 1;
  void clear_node();
  const std::string& node() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* node);
  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(const std::string& value);
  std::string* _internal_mutable_node();
  public:

  // optional bytes delimiter = 4;
  bool has_delimiter() const;
  private:
  bool _internal_has_delimiter() const;
  public:
  void clear_delimiter();
  const std::string& delimiter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delimiter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delimiter();
  PROTOBUF_NODISCARD std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // optional int32 log_level = 2;
  bool has_log_level() const;
  private:
  bool _internal_has_log_level() const;
  public:
  void clear_log_level();
  int32_t log_level() const;
  void set_log_level(int32_t value);
  private:
  int32_t _internal_log_level() const;
  void _internal_set_log_level(int32_t value);
  public:

  // optional bool is_protobuf = 3;
  bool has_is_protobuf() const;
  private:
  bool _internal_has_is_protobuf() const;
  public:
  void clear_is_protobuf();
  bool is_protobuf() const;
  void set_is_protobuf(bool value);
  private:
  bool _internal_is_protobuf() const;
  void _internal_set_is_protobuf(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.AgentConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
    int32_t log_level_;
    bool is_protobuf_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AgentConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AgentConfig

// string node = 1;
inline void AgentConfig::clear_node() {
  _impl_.node_.ClearToEmpty();
}
inline const std::string& AgentConfig::node() const {
  // @@protoc_insertion_point(field_get:hybrid.AgentConfig.node)
  return _internal_node();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig::set_node(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.AgentConfig.node)
}
inline std::string* AgentConfig::mutable_node() {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:hybrid.AgentConfig.node)
  return _s;
}
inline const std::string& AgentConfig::_internal_node() const {
  return _impl_.node_.Get();
}
inline void AgentConfig::_internal_set_node(const std::string& value) {
  
  _impl_.node_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentConfig::_internal_mutable_node() {
  
  return _impl_.node_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentConfig::release_node() {
  // @@protoc_insertion_point(field_release:hybrid.AgentConfig.node)
  return _impl_.node_.Release();
}
inline void AgentConfig::set_allocated_node(std::string* node) {
  if (node != nullptr) {
    
  } else {
    
  }
  _impl_.node_.SetAllocated(node, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.AgentConfig.node)
}

// optional int32 log_level = 2;
inline bool AgentConfig::_internal_has_log_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AgentConfig::has_log_level() const {
  return _internal_has_log_level();
}
inline void AgentConfig::clear_log_level() {
  _impl_.log_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t AgentConfig::_internal_log_level() const {
  return _impl_.log_level_;
}
inline int32_t AgentConfig::log_level() const {
  // @@protoc_insertion_point(field_get:hybrid.AgentConfig.log_level)
  return _internal_log_level();
}
inline void AgentConfig::_internal_set_log_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.log_level_ = value;
}
inline void AgentConfig::set_log_level(int32_t value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:hybrid.AgentConfig.log_level)
}

// optional bool is_protobuf = 3;
inline bool AgentConfig::_internal_has_is_protobuf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AgentConfig::has_is_protobuf() const {
  return _internal_has_is_protobuf();
}
inline void AgentConfig::clear_is_protobuf() {
  _impl_.is_protobuf_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool AgentConfig::_internal_is_protobuf() const {
  return _impl_.is_protobuf_;
}
inline bool AgentConfig::is_protobuf() const {
  // @@protoc_insertion_point(field_get:hybrid.AgentConfig.is_protobuf)
  return _internal_is_protobuf();
}
inline void AgentConfig::_internal_set_is_protobuf(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_protobuf_ = value;
}
inline void AgentConfig::set_is_protobuf(bool value) {
  _internal_set_is_protobuf(value);
  // @@protoc_insertion_point(field_set:hybrid.AgentConfig.is_protobuf)
}

// optional bytes delimiter = 4;
inline bool AgentConfig::_internal_has_delimiter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AgentConfig::has_delimiter() const {
  return _internal_has_delimiter();
}
inline void AgentConfig::clear_delimiter() {
  _impl_.delimiter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AgentConfig::delimiter() const {
  // @@protoc_insertion_point(field_get:hybrid.AgentConfig.delimiter)
  return _internal_delimiter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentConfig::set_delimiter(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.delimiter_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.AgentConfig.delimiter)
}
inline std::string* AgentConfig::mutable_delimiter() {
  std::string* _s = _internal_mutable_delimiter();
  // @@protoc_insertion_point(field_mutable:hybrid.AgentConfig.delimiter)
  return _s;
}
inline const std::string& AgentConfig::_internal_delimiter() const {
  return _impl_.delimiter_.Get();
}
inline void AgentConfig::_internal_set_delimiter(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delimiter_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentConfig::_internal_mutable_delimiter() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.delimiter_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentConfig::release_delimiter() {
  // @@protoc_insertion_point(field_release:hybrid.AgentConfig.delimiter)
  if (!_internal_has_delimiter()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.delimiter_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delimiter_.IsDefault()) {
    _impl_.delimiter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AgentConfig::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.delimiter_.SetAllocated(delimiter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delimiter_.IsDefault()) {
    _impl_.delimiter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.AgentConfig.delimiter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hybrid

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AgentConfig_2eproto
