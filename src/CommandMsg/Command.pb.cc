// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#include "Command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hybrid {
PROTOBUF_CONSTEXPR Advertise::Advertise(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.queue_size_)*/0u
  , /*decltype(_impl_.latch_)*/false} {}
struct AdvertiseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdvertiseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdvertiseDefaultTypeInternal() {}
  union {
    Advertise _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdvertiseDefaultTypeInternal _Advertise_default_instance_;
PROTOBUF_CONSTEXPR Unadvertise::Unadvertise(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnadvertiseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnadvertiseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnadvertiseDefaultTypeInternal() {}
  union {
    Unadvertise _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnadvertiseDefaultTypeInternal _Unadvertise_default_instance_;
PROTOBUF_CONSTEXPR Publish::Publish(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublishDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishDefaultTypeInternal() {}
  union {
    Publish _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishDefaultTypeInternal _Publish_default_instance_;
PROTOBUF_CONSTEXPR Subscribe::Subscribe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.queue_size_)*/0u} {}
struct SubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeDefaultTypeInternal() {}
  union {
    Subscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeDefaultTypeInternal _Subscribe_default_instance_;
PROTOBUF_CONSTEXPR Unsubscribe::Unsubscribe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsubscribeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsubscribeDefaultTypeInternal() {}
  union {
    Unsubscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsubscribeDefaultTypeInternal _Unsubscribe_default_instance_;
PROTOBUF_CONSTEXPR CallService::CallService(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seq_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallServiceDefaultTypeInternal() {}
  union {
    CallService _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallServiceDefaultTypeInternal _CallService_default_instance_;
PROTOBUF_CONSTEXPR AdvertiseService::AdvertiseService(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdvertiseServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdvertiseServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdvertiseServiceDefaultTypeInternal() {}
  union {
    AdvertiseService _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdvertiseServiceDefaultTypeInternal _AdvertiseService_default_instance_;
PROTOBUF_CONSTEXPR UnadvertiseService::UnadvertiseService(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnadvertiseServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnadvertiseServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnadvertiseServiceDefaultTypeInternal() {}
  union {
    UnadvertiseService _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnadvertiseServiceDefaultTypeInternal _UnadvertiseService_default_instance_;
PROTOBUF_CONSTEXPR ResponseService::ResponseService(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seq_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseServiceDefaultTypeInternal() {}
  union {
    ResponseService _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseServiceDefaultTypeInternal _ResponseService_default_instance_;
PROTOBUF_CONSTEXPR Log::Log(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogDefaultTypeInternal _Log_default_instance_;
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.advertise_)*/nullptr
  , /*decltype(_impl_.publish_)*/nullptr
  , /*decltype(_impl_.unadvertise_)*/nullptr
  , /*decltype(_impl_.subscribe_)*/nullptr
  , /*decltype(_impl_.unsubscribe_)*/nullptr
  , /*decltype(_impl_.advertise_service_)*/nullptr
  , /*decltype(_impl_.call_service_)*/nullptr
  , /*decltype(_impl_.response_service_)*/nullptr
  , /*decltype(_impl_.unadvertise_service_)*/nullptr
  , /*decltype(_impl_.log_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
}  // namespace hybrid
static ::_pb::Metadata file_level_metadata_Command_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Command_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Command_2eproto = nullptr;

const uint32_t TableStruct_Command_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hybrid::Advertise, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Advertise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::Advertise, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Advertise, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Advertise, _impl_.queue_size_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Advertise, _impl_.latch_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid::Unadvertise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::Unadvertise, _impl_.topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid::Publish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::Publish, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Publish, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Publish, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Subscribe, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Subscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::Subscribe, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Subscribe, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Subscribe, _impl_.queue_size_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid::Unsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::Unsubscribe, _impl_.topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid::CallService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::CallService, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::hybrid::CallService, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::hybrid::CallService, _impl_.seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid::AdvertiseService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::AdvertiseService, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::hybrid::AdvertiseService, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid::UnadvertiseService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::UnadvertiseService, _impl_.service_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid::ResponseService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::ResponseService, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::hybrid::ResponseService, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::hybrid::ResponseService, _impl_.seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hybrid::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::Log, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Log, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.advertise_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.publish_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.unadvertise_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.subscribe_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.unsubscribe_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.advertise_service_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.call_service_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.response_service_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.unadvertise_service_),
  PROTOBUF_FIELD_OFFSET(::hybrid::Command, _impl_.log_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::hybrid::Advertise)},
  { 14, -1, -1, sizeof(::hybrid::Unadvertise)},
  { 21, -1, -1, sizeof(::hybrid::Publish)},
  { 30, 39, -1, sizeof(::hybrid::Subscribe)},
  { 42, -1, -1, sizeof(::hybrid::Unsubscribe)},
  { 49, -1, -1, sizeof(::hybrid::CallService)},
  { 58, -1, -1, sizeof(::hybrid::AdvertiseService)},
  { 66, -1, -1, sizeof(::hybrid::UnadvertiseService)},
  { 73, -1, -1, sizeof(::hybrid::ResponseService)},
  { 82, -1, -1, sizeof(::hybrid::Log)},
  { 90, 107, -1, sizeof(::hybrid::Command)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hybrid::_Advertise_default_instance_._instance,
  &::hybrid::_Unadvertise_default_instance_._instance,
  &::hybrid::_Publish_default_instance_._instance,
  &::hybrid::_Subscribe_default_instance_._instance,
  &::hybrid::_Unsubscribe_default_instance_._instance,
  &::hybrid::_CallService_default_instance_._instance,
  &::hybrid::_AdvertiseService_default_instance_._instance,
  &::hybrid::_UnadvertiseService_default_instance_._instance,
  &::hybrid::_ResponseService_default_instance_._instance,
  &::hybrid::_Log_default_instance_._instance,
  &::hybrid::_Command_default_instance_._instance,
};

const char descriptor_table_protodef_Command_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rCommand.proto\022\006hybrid\"n\n\tAdvertise\022\r\n\005"
  "topic\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\027\n\nqueue_size\030"
  "\004 \001(\rH\000\210\001\001\022\022\n\005latch\030\005 \001(\010H\001\210\001\001B\r\n\013_queue"
  "_sizeB\010\n\006_latch\"\034\n\013Unadvertise\022\r\n\005topic\030"
  "\001 \001(\t\"4\n\007Publish\022\r\n\005topic\030\001 \001(\t\022\014\n\004type\030"
  "\002 \001(\t\022\014\n\004data\030\003 \001(\014\"P\n\tSubscribe\022\r\n\005topi"
  "c\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\027\n\nqueue_size\030\003 \001("
  "\rH\000\210\001\001B\r\n\013_queue_size\"\034\n\013Unsubscribe\022\r\n\005"
  "topic\030\001 \001(\t\"9\n\013CallService\022\017\n\007service\030\001 "
  "\001(\t\022\014\n\004data\030\003 \001(\014\022\013\n\003seq\030\004 \001(\004\"1\n\020Advert"
  "iseService\022\017\n\007service\030\001 \001(\t\022\014\n\004type\030\002 \001("
  "\t\"%\n\022UnadvertiseService\022\017\n\007service\030\001 \001(\t"
  "\"=\n\017ResponseService\022\017\n\007service\030\001 \001(\t\022\014\n\004"
  "data\030\002 \001(\014\022\013\n\003seq\030\003 \001(\004\"v\n\003Log\022 \n\005level\030"
  "\001 \001(\0162\021.hybrid.Log.Level\022\017\n\007message\030\002 \001("
  "\t\"<\n\005Level\022\t\n\005DEBUG\020\000\022\010\n\004INFO\020\001\022\010\n\004WARN\020"
  "\002\022\t\n\005ERROR\020\003\022\t\n\005FATAL\020\004\"\372\006\n\007Command\022\"\n\004t"
  "ype\030\001 \001(\0162\024.hybrid.Command.Type\022)\n\tadver"
  "tise\030\002 \001(\0132\021.hybrid.AdvertiseH\000\210\001\001\022%\n\007pu"
  "blish\030\003 \001(\0132\017.hybrid.PublishH\001\210\001\001\022-\n\013una"
  "dvertise\030\004 \001(\0132\023.hybrid.UnadvertiseH\002\210\001\001"
  "\022)\n\tsubscribe\030\005 \001(\0132\021.hybrid.SubscribeH\003"
  "\210\001\001\022-\n\013unsubscribe\030\006 \001(\0132\023.hybrid.Unsubs"
  "cribeH\004\210\001\001\0228\n\021advertise_service\030\007 \001(\0132\030."
  "hybrid.AdvertiseServiceH\005\210\001\001\022.\n\014call_ser"
  "vice\030\010 \001(\0132\023.hybrid.CallServiceH\006\210\001\001\0226\n\020"
  "response_service\030\t \001(\0132\027.hybrid.Response"
  "ServiceH\007\210\001\001\022<\n\023unadvertise_service\030\n \001("
  "\0132\032.hybrid.UnadvertiseServiceH\010\210\001\001\022\035\n\003lo"
  "g\030\013 \001(\0132\013.hybrid.LogH\t\210\001\001\"\314\001\n\004Type\022\013\n\007UN"
  "KNOWN\020\000\022\r\n\tADVERTISE\020\001\022\013\n\007PUBLISH\020\002\022\017\n\013U"
  "NADVERTISE\020\003\022\r\n\tSUBSCRIBE\020\004\022\017\n\013UNSUBSCRI"
  "BE\020\005\022\025\n\021ADVERTISE_SERVICE\020\006\022\020\n\014CALL_SERV"
  "ICE\020\007\022\024\n\020RESPONSE_SERVICE\020\010\022\027\n\023UNADVERTI"
  "SE_SERVICE\020\t\022\007\n\003LOG\020\n\022\t\n\004PING\020\200\001B\014\n\n_adv"
  "ertiseB\n\n\010_publishB\016\n\014_unadvertiseB\014\n\n_s"
  "ubscribeB\016\n\014_unsubscribeB\024\n\022_advertise_s"
  "erviceB\017\n\r_call_serviceB\023\n\021_response_ser"
  "viceB\026\n\024_unadvertise_serviceB\006\n\004_logb\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_Command_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Command_2eproto = {
    false, false, 1564, descriptor_table_protodef_Command_2eproto,
    "Command.proto",
    &descriptor_table_Command_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_Command_2eproto::offsets,
    file_level_metadata_Command_2eproto, file_level_enum_descriptors_Command_2eproto,
    file_level_service_descriptors_Command_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Command_2eproto_getter() {
  return &descriptor_table_Command_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Command_2eproto(&descriptor_table_Command_2eproto);
namespace hybrid {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Log_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Command_2eproto);
  return file_level_enum_descriptors_Command_2eproto[0];
}
bool Log_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Log_Level Log::DEBUG;
constexpr Log_Level Log::INFO;
constexpr Log_Level Log::WARN;
constexpr Log_Level Log::ERROR;
constexpr Log_Level Log::FATAL;
constexpr Log_Level Log::Level_MIN;
constexpr Log_Level Log::Level_MAX;
constexpr int Log::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Command_2eproto);
  return file_level_enum_descriptors_Command_2eproto[1];
}
bool Command_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 128:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Command_Type Command::UNKNOWN;
constexpr Command_Type Command::ADVERTISE;
constexpr Command_Type Command::PUBLISH;
constexpr Command_Type Command::UNADVERTISE;
constexpr Command_Type Command::SUBSCRIBE;
constexpr Command_Type Command::UNSUBSCRIBE;
constexpr Command_Type Command::ADVERTISE_SERVICE;
constexpr Command_Type Command::CALL_SERVICE;
constexpr Command_Type Command::RESPONSE_SERVICE;
constexpr Command_Type Command::UNADVERTISE_SERVICE;
constexpr Command_Type Command::LOG;
constexpr Command_Type Command::PING;
constexpr Command_Type Command::Type_MIN;
constexpr Command_Type Command::Type_MAX;
constexpr int Command::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Advertise::_Internal {
 public:
  using HasBits = decltype(std::declval<Advertise>()._impl_._has_bits_);
  static void set_has_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Advertise::Advertise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.Advertise)
}
Advertise::Advertise(const Advertise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Advertise* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.queue_size_){}
    , decltype(_impl_.latch_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.queue_size_, &from._impl_.queue_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latch_) -
    reinterpret_cast<char*>(&_impl_.queue_size_)) + sizeof(_impl_.latch_));
  // @@protoc_insertion_point(copy_constructor:hybrid.Advertise)
}

inline void Advertise::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.queue_size_){0u}
    , decltype(_impl_.latch_){false}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Advertise::~Advertise() {
  // @@protoc_insertion_point(destructor:hybrid.Advertise)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Advertise::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
  _impl_.type_.Destroy();
}

void Advertise::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Advertise::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.Advertise)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.queue_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.latch_) -
        reinterpret_cast<char*>(&_impl_.queue_size_)) + sizeof(_impl_.latch_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Advertise::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Advertise.topic"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Advertise.type"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 queue_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_queue_size(&has_bits);
          _impl_.queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool latch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_latch(&has_bits);
          _impl_.latch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Advertise::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.Advertise)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Advertise.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Advertise.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // optional uint32 queue_size = 4;
  if (_internal_has_queue_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_queue_size(), target);
  }

  // optional bool latch = 5;
  if (_internal_has_latch()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_latch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.Advertise)
  return target;
}

size_t Advertise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.Advertise)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 queue_size = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_queue_size());
    }

    // optional bool latch = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Advertise::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Advertise::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Advertise::GetClassData() const { return &_class_data_; }


void Advertise::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Advertise*>(&to_msg);
  auto& from = static_cast<const Advertise&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.Advertise)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.queue_size_ = from._impl_.queue_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.latch_ = from._impl_.latch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Advertise::CopyFrom(const Advertise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.Advertise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Advertise::IsInitialized() const {
  return true;
}

void Advertise::InternalSwap(Advertise* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Advertise, _impl_.latch_)
      + sizeof(Advertise::_impl_.latch_)
      - PROTOBUF_FIELD_OFFSET(Advertise, _impl_.queue_size_)>(
          reinterpret_cast<char*>(&_impl_.queue_size_),
          reinterpret_cast<char*>(&other->_impl_.queue_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Advertise::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[0]);
}

// ===================================================================

class Unadvertise::_Internal {
 public:
};

Unadvertise::Unadvertise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.Unadvertise)
}
Unadvertise::Unadvertise(const Unadvertise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Unadvertise* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid.Unadvertise)
}

inline void Unadvertise::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Unadvertise::~Unadvertise() {
  // @@protoc_insertion_point(destructor:hybrid.Unadvertise)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Unadvertise::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
}

void Unadvertise::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Unadvertise::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.Unadvertise)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unadvertise::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Unadvertise.topic"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Unadvertise::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.Unadvertise)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Unadvertise.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.Unadvertise)
  return target;
}

size_t Unadvertise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.Unadvertise)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Unadvertise::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Unadvertise::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Unadvertise::GetClassData() const { return &_class_data_; }


void Unadvertise::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Unadvertise*>(&to_msg);
  auto& from = static_cast<const Unadvertise&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.Unadvertise)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Unadvertise::CopyFrom(const Unadvertise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.Unadvertise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unadvertise::IsInitialized() const {
  return true;
}

void Unadvertise::InternalSwap(Unadvertise* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Unadvertise::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[1]);
}

// ===================================================================

class Publish::_Internal {
 public:
};

Publish::Publish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.Publish)
}
Publish::Publish(const Publish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Publish* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid.Publish)
}

inline void Publish::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Publish::~Publish() {
  // @@protoc_insertion_point(destructor:hybrid.Publish)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Publish::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
  _impl_.type_.Destroy();
  _impl_.data_.Destroy();
}

void Publish::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Publish::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.Publish)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Publish::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Publish.topic"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Publish.type"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Publish::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.Publish)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Publish.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Publish.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.Publish)
  return target;
}

size_t Publish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.Publish)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Publish::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Publish::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Publish::GetClassData() const { return &_class_data_; }


void Publish::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Publish*>(&to_msg);
  auto& from = static_cast<const Publish&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.Publish)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Publish::CopyFrom(const Publish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.Publish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publish::IsInitialized() const {
  return true;
}

void Publish::InternalSwap(Publish* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Publish::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[2]);
}

// ===================================================================

class Subscribe::_Internal {
 public:
  using HasBits = decltype(std::declval<Subscribe>()._impl_._has_bits_);
  static void set_has_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Subscribe::Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.Subscribe)
}
Subscribe::Subscribe(const Subscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subscribe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.queue_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.queue_size_ = from._impl_.queue_size_;
  // @@protoc_insertion_point(copy_constructor:hybrid.Subscribe)
}

inline void Subscribe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.queue_size_){0u}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Subscribe::~Subscribe() {
  // @@protoc_insertion_point(destructor:hybrid.Subscribe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
  _impl_.type_.Destroy();
}

void Subscribe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.Subscribe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.queue_size_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subscribe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Subscribe.topic"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Subscribe.type"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 queue_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_queue_size(&has_bits);
          _impl_.queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subscribe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.Subscribe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Subscribe.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Subscribe.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // optional uint32 queue_size = 3;
  if (_internal_has_queue_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_queue_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.Subscribe)
  return target;
}

size_t Subscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.Subscribe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // optional uint32 queue_size = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_queue_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subscribe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subscribe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subscribe::GetClassData() const { return &_class_data_; }


void Subscribe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subscribe*>(&to_msg);
  auto& from = static_cast<const Subscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.Subscribe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_queue_size()) {
    _this->_internal_set_queue_size(from._internal_queue_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subscribe::CopyFrom(const Subscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscribe::IsInitialized() const {
  return true;
}

void Subscribe::InternalSwap(Subscribe* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.queue_size_, other->_impl_.queue_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscribe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[3]);
}

// ===================================================================

class Unsubscribe::_Internal {
 public:
};

Unsubscribe::Unsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.Unsubscribe)
}
Unsubscribe::Unsubscribe(const Unsubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Unsubscribe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid.Unsubscribe)
}

inline void Unsubscribe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Unsubscribe::~Unsubscribe() {
  // @@protoc_insertion_point(destructor:hybrid.Unsubscribe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Unsubscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
}

void Unsubscribe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Unsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.Unsubscribe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unsubscribe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Unsubscribe.topic"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Unsubscribe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.Unsubscribe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Unsubscribe.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.Unsubscribe)
  return target;
}

size_t Unsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.Unsubscribe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Unsubscribe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Unsubscribe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Unsubscribe::GetClassData() const { return &_class_data_; }


void Unsubscribe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Unsubscribe*>(&to_msg);
  auto& from = static_cast<const Unsubscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.Unsubscribe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Unsubscribe::CopyFrom(const Unsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.Unsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unsubscribe::IsInitialized() const {
  return true;
}

void Unsubscribe::InternalSwap(Unsubscribe* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Unsubscribe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[4]);
}

// ===================================================================

class CallService::_Internal {
 public:
};

CallService::CallService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.CallService)
}
CallService::CallService(const CallService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallService* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.seq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    _this->_impl_.service_.Set(from._internal_service(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.seq_ = from._impl_.seq_;
  // @@protoc_insertion_point(copy_constructor:hybrid.CallService)
}

inline void CallService::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.seq_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallService::~CallService() {
  // @@protoc_insertion_point(destructor:hybrid.CallService)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_.Destroy();
  _impl_.data_.Destroy();
}

void CallService::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallService::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.CallService)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.seq_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallService::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.CallService.service"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallService::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.CallService)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.CallService.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint64 seq = 4;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.CallService)
  return target;
}

size_t CallService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.CallService)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 seq = 4;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallService::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallService::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallService::GetClassData() const { return &_class_data_; }


void CallService::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallService*>(&to_msg);
  auto& from = static_cast<const CallService&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.CallService)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallService::CopyFrom(const CallService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.CallService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallService::IsInitialized() const {
  return true;
}

void CallService::InternalSwap(CallService* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.seq_, other->_impl_.seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallService::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[5]);
}

// ===================================================================

class AdvertiseService::_Internal {
 public:
};

AdvertiseService::AdvertiseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.AdvertiseService)
}
AdvertiseService::AdvertiseService(const AdvertiseService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdvertiseService* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    _this->_impl_.service_.Set(from._internal_service(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid.AdvertiseService)
}

inline void AdvertiseService::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdvertiseService::~AdvertiseService() {
  // @@protoc_insertion_point(destructor:hybrid.AdvertiseService)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdvertiseService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_.Destroy();
  _impl_.type_.Destroy();
}

void AdvertiseService::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdvertiseService::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.AdvertiseService)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdvertiseService::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.AdvertiseService.service"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.AdvertiseService.type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdvertiseService::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.AdvertiseService)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.AdvertiseService.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.AdvertiseService.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.AdvertiseService)
  return target;
}

size_t AdvertiseService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.AdvertiseService)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdvertiseService::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdvertiseService::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdvertiseService::GetClassData() const { return &_class_data_; }


void AdvertiseService::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdvertiseService*>(&to_msg);
  auto& from = static_cast<const AdvertiseService&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.AdvertiseService)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdvertiseService::CopyFrom(const AdvertiseService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.AdvertiseService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertiseService::IsInitialized() const {
  return true;
}

void AdvertiseService::InternalSwap(AdvertiseService* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvertiseService::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[6]);
}

// ===================================================================

class UnadvertiseService::_Internal {
 public:
};

UnadvertiseService::UnadvertiseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.UnadvertiseService)
}
UnadvertiseService::UnadvertiseService(const UnadvertiseService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnadvertiseService* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    _this->_impl_.service_.Set(from._internal_service(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hybrid.UnadvertiseService)
}

inline void UnadvertiseService::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnadvertiseService::~UnadvertiseService() {
  // @@protoc_insertion_point(destructor:hybrid.UnadvertiseService)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnadvertiseService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_.Destroy();
}

void UnadvertiseService::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnadvertiseService::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.UnadvertiseService)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnadvertiseService::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.UnadvertiseService.service"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnadvertiseService::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.UnadvertiseService)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.UnadvertiseService.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.UnadvertiseService)
  return target;
}

size_t UnadvertiseService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.UnadvertiseService)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnadvertiseService::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnadvertiseService::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnadvertiseService::GetClassData() const { return &_class_data_; }


void UnadvertiseService::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnadvertiseService*>(&to_msg);
  auto& from = static_cast<const UnadvertiseService&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.UnadvertiseService)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnadvertiseService::CopyFrom(const UnadvertiseService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.UnadvertiseService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnadvertiseService::IsInitialized() const {
  return true;
}

void UnadvertiseService::InternalSwap(UnadvertiseService* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnadvertiseService::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[7]);
}

// ===================================================================

class ResponseService::_Internal {
 public:
};

ResponseService::ResponseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.ResponseService)
}
ResponseService::ResponseService(const ResponseService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseService* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.seq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    _this->_impl_.service_.Set(from._internal_service(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.seq_ = from._impl_.seq_;
  // @@protoc_insertion_point(copy_constructor:hybrid.ResponseService)
}

inline void ResponseService::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.seq_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseService::~ResponseService() {
  // @@protoc_insertion_point(destructor:hybrid.ResponseService)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_.Destroy();
  _impl_.data_.Destroy();
}

void ResponseService::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseService::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.ResponseService)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.seq_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseService::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.ResponseService.service"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseService::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.ResponseService)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.ResponseService.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint64 seq = 3;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.ResponseService)
  return target;
}

size_t ResponseService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.ResponseService)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 seq = 3;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseService::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseService::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseService::GetClassData() const { return &_class_data_; }


void ResponseService::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseService*>(&to_msg);
  auto& from = static_cast<const ResponseService&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.ResponseService)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseService::CopyFrom(const ResponseService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.ResponseService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseService::IsInitialized() const {
  return true;
}

void ResponseService::InternalSwap(ResponseService* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.seq_, other->_impl_.seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseService::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[8]);
}

// ===================================================================

class Log::_Internal {
 public:
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Log* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:hybrid.Log)
}

inline void Log::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:hybrid.Log)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Log::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.Log)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hybrid.Log.Level level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::hybrid::Log_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hybrid.Log.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Log::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.Log)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hybrid.Log.Level level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hybrid.Log.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.Log)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .hybrid.Log.Level level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Log::GetClassData() const { return &_class_data_; }


void Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Log*>(&to_msg);
  auto& from = static_cast<const Log&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.Log)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[9]);
}

// ===================================================================

class Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Command>()._impl_._has_bits_);
  static const ::hybrid::Advertise& advertise(const Command* msg);
  static void set_has_advertise(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hybrid::Publish& publish(const Command* msg);
  static void set_has_publish(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hybrid::Unadvertise& unadvertise(const Command* msg);
  static void set_has_unadvertise(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hybrid::Subscribe& subscribe(const Command* msg);
  static void set_has_subscribe(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hybrid::Unsubscribe& unsubscribe(const Command* msg);
  static void set_has_unsubscribe(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hybrid::AdvertiseService& advertise_service(const Command* msg);
  static void set_has_advertise_service(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::hybrid::CallService& call_service(const Command* msg);
  static void set_has_call_service(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hybrid::ResponseService& response_service(const Command* msg);
  static void set_has_response_service(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hybrid::UnadvertiseService& unadvertise_service(const Command* msg);
  static void set_has_unadvertise_service(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::hybrid::Log& log(const Command* msg);
  static void set_has_log(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::hybrid::Advertise&
Command::_Internal::advertise(const Command* msg) {
  return *msg->_impl_.advertise_;
}
const ::hybrid::Publish&
Command::_Internal::publish(const Command* msg) {
  return *msg->_impl_.publish_;
}
const ::hybrid::Unadvertise&
Command::_Internal::unadvertise(const Command* msg) {
  return *msg->_impl_.unadvertise_;
}
const ::hybrid::Subscribe&
Command::_Internal::subscribe(const Command* msg) {
  return *msg->_impl_.subscribe_;
}
const ::hybrid::Unsubscribe&
Command::_Internal::unsubscribe(const Command* msg) {
  return *msg->_impl_.unsubscribe_;
}
const ::hybrid::AdvertiseService&
Command::_Internal::advertise_service(const Command* msg) {
  return *msg->_impl_.advertise_service_;
}
const ::hybrid::CallService&
Command::_Internal::call_service(const Command* msg) {
  return *msg->_impl_.call_service_;
}
const ::hybrid::ResponseService&
Command::_Internal::response_service(const Command* msg) {
  return *msg->_impl_.response_service_;
}
const ::hybrid::UnadvertiseService&
Command::_Internal::unadvertise_service(const Command* msg) {
  return *msg->_impl_.unadvertise_service_;
}
const ::hybrid::Log&
Command::_Internal::log(const Command* msg) {
  return *msg->_impl_.log_;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hybrid.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.advertise_){nullptr}
    , decltype(_impl_.publish_){nullptr}
    , decltype(_impl_.unadvertise_){nullptr}
    , decltype(_impl_.subscribe_){nullptr}
    , decltype(_impl_.unsubscribe_){nullptr}
    , decltype(_impl_.advertise_service_){nullptr}
    , decltype(_impl_.call_service_){nullptr}
    , decltype(_impl_.response_service_){nullptr}
    , decltype(_impl_.unadvertise_service_){nullptr}
    , decltype(_impl_.log_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advertise()) {
    _this->_impl_.advertise_ = new ::hybrid::Advertise(*from._impl_.advertise_);
  }
  if (from._internal_has_publish()) {
    _this->_impl_.publish_ = new ::hybrid::Publish(*from._impl_.publish_);
  }
  if (from._internal_has_unadvertise()) {
    _this->_impl_.unadvertise_ = new ::hybrid::Unadvertise(*from._impl_.unadvertise_);
  }
  if (from._internal_has_subscribe()) {
    _this->_impl_.subscribe_ = new ::hybrid::Subscribe(*from._impl_.subscribe_);
  }
  if (from._internal_has_unsubscribe()) {
    _this->_impl_.unsubscribe_ = new ::hybrid::Unsubscribe(*from._impl_.unsubscribe_);
  }
  if (from._internal_has_advertise_service()) {
    _this->_impl_.advertise_service_ = new ::hybrid::AdvertiseService(*from._impl_.advertise_service_);
  }
  if (from._internal_has_call_service()) {
    _this->_impl_.call_service_ = new ::hybrid::CallService(*from._impl_.call_service_);
  }
  if (from._internal_has_response_service()) {
    _this->_impl_.response_service_ = new ::hybrid::ResponseService(*from._impl_.response_service_);
  }
  if (from._internal_has_unadvertise_service()) {
    _this->_impl_.unadvertise_service_ = new ::hybrid::UnadvertiseService(*from._impl_.unadvertise_service_);
  }
  if (from._internal_has_log()) {
    _this->_impl_.log_ = new ::hybrid::Log(*from._impl_.log_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:hybrid.Command)
}

inline void Command::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.advertise_){nullptr}
    , decltype(_impl_.publish_){nullptr}
    , decltype(_impl_.unadvertise_){nullptr}
    , decltype(_impl_.subscribe_){nullptr}
    , decltype(_impl_.unsubscribe_){nullptr}
    , decltype(_impl_.advertise_service_){nullptr}
    , decltype(_impl_.call_service_){nullptr}
    , decltype(_impl_.response_service_){nullptr}
    , decltype(_impl_.unadvertise_service_){nullptr}
    , decltype(_impl_.log_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:hybrid.Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.advertise_;
  if (this != internal_default_instance()) delete _impl_.publish_;
  if (this != internal_default_instance()) delete _impl_.unadvertise_;
  if (this != internal_default_instance()) delete _impl_.subscribe_;
  if (this != internal_default_instance()) delete _impl_.unsubscribe_;
  if (this != internal_default_instance()) delete _impl_.advertise_service_;
  if (this != internal_default_instance()) delete _impl_.call_service_;
  if (this != internal_default_instance()) delete _impl_.response_service_;
  if (this != internal_default_instance()) delete _impl_.unadvertise_service_;
  if (this != internal_default_instance()) delete _impl_.log_;
}

void Command::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:hybrid.Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.advertise_ != nullptr);
      _impl_.advertise_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.publish_ != nullptr);
      _impl_.publish_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.unadvertise_ != nullptr);
      _impl_.unadvertise_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.subscribe_ != nullptr);
      _impl_.subscribe_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.unsubscribe_ != nullptr);
      _impl_.unsubscribe_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.advertise_service_ != nullptr);
      _impl_.advertise_service_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.call_service_ != nullptr);
      _impl_.call_service_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.response_service_ != nullptr);
      _impl_.response_service_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.unadvertise_service_ != nullptr);
      _impl_.unadvertise_service_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.log_ != nullptr);
      _impl_.log_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hybrid.Command.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::hybrid::Command_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.Advertise advertise = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_advertise(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.Publish publish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.Unadvertise unadvertise = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unadvertise(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.Subscribe subscribe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.Unsubscribe unsubscribe = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsubscribe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.AdvertiseService advertise_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_advertise_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.CallService call_service = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.ResponseService response_service = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.UnadvertiseService unadvertise_service = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unadvertise_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hybrid.Log log = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybrid.Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hybrid.Command.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .hybrid.Advertise advertise = 2;
  if (_internal_has_advertise()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::advertise(this),
        _Internal::advertise(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.Publish publish = 3;
  if (_internal_has_publish()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::publish(this),
        _Internal::publish(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.Unadvertise unadvertise = 4;
  if (_internal_has_unadvertise()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::unadvertise(this),
        _Internal::unadvertise(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.Subscribe subscribe = 5;
  if (_internal_has_subscribe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::subscribe(this),
        _Internal::subscribe(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.Unsubscribe unsubscribe = 6;
  if (_internal_has_unsubscribe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::unsubscribe(this),
        _Internal::unsubscribe(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.AdvertiseService advertise_service = 7;
  if (_internal_has_advertise_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::advertise_service(this),
        _Internal::advertise_service(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.CallService call_service = 8;
  if (_internal_has_call_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::call_service(this),
        _Internal::call_service(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.ResponseService response_service = 9;
  if (_internal_has_response_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response_service(this),
        _Internal::response_service(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.UnadvertiseService unadvertise_service = 10;
  if (_internal_has_unadvertise_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::unadvertise_service(this),
        _Internal::unadvertise_service(this).GetCachedSize(), target, stream);
  }

  // optional .hybrid.Log log = 11;
  if (_internal_has_log()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::log(this),
        _Internal::log(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybrid.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybrid.Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .hybrid.Advertise advertise = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.advertise_);
    }

    // optional .hybrid.Publish publish = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.publish_);
    }

    // optional .hybrid.Unadvertise unadvertise = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unadvertise_);
    }

    // optional .hybrid.Subscribe subscribe = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subscribe_);
    }

    // optional .hybrid.Unsubscribe unsubscribe = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unsubscribe_);
    }

    // optional .hybrid.AdvertiseService advertise_service = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.advertise_service_);
    }

    // optional .hybrid.CallService call_service = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.call_service_);
    }

    // optional .hybrid.ResponseService response_service = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_service_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .hybrid.UnadvertiseService unadvertise_service = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unadvertise_service_);
    }

    // optional .hybrid.Log log = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.log_);
    }

  }
  // .hybrid.Command.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }


void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command*>(&to_msg);
  auto& from = static_cast<const Command&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hybrid.Command)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_advertise()->::hybrid::Advertise::MergeFrom(
          from._internal_advertise());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_publish()->::hybrid::Publish::MergeFrom(
          from._internal_publish());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_unadvertise()->::hybrid::Unadvertise::MergeFrom(
          from._internal_unadvertise());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_subscribe()->::hybrid::Subscribe::MergeFrom(
          from._internal_subscribe());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_unsubscribe()->::hybrid::Unsubscribe::MergeFrom(
          from._internal_unsubscribe());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_advertise_service()->::hybrid::AdvertiseService::MergeFrom(
          from._internal_advertise_service());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_call_service()->::hybrid::CallService::MergeFrom(
          from._internal_call_service());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_response_service()->::hybrid::ResponseService::MergeFrom(
          from._internal_response_service());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_unadvertise_service()->::hybrid::UnadvertiseService::MergeFrom(
          from._internal_unadvertise_service());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_log()->::hybrid::Log::MergeFrom(
          from._internal_log());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybrid.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, _impl_.type_)
      + sizeof(Command::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Command, _impl_.advertise_)>(
          reinterpret_cast<char*>(&_impl_.advertise_),
          reinterpret_cast<char*>(&other->_impl_.advertise_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hybrid
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hybrid::Advertise*
Arena::CreateMaybeMessage< ::hybrid::Advertise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::Advertise >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::Unadvertise*
Arena::CreateMaybeMessage< ::hybrid::Unadvertise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::Unadvertise >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::Publish*
Arena::CreateMaybeMessage< ::hybrid::Publish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::Publish >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::Subscribe*
Arena::CreateMaybeMessage< ::hybrid::Subscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::Subscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::Unsubscribe*
Arena::CreateMaybeMessage< ::hybrid::Unsubscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::Unsubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::CallService*
Arena::CreateMaybeMessage< ::hybrid::CallService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::CallService >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::AdvertiseService*
Arena::CreateMaybeMessage< ::hybrid::AdvertiseService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::AdvertiseService >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::UnadvertiseService*
Arena::CreateMaybeMessage< ::hybrid::UnadvertiseService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::UnadvertiseService >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::ResponseService*
Arena::CreateMaybeMessage< ::hybrid::ResponseService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::ResponseService >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::Log*
Arena::CreateMaybeMessage< ::hybrid::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::hybrid::Command*
Arena::CreateMaybeMessage< ::hybrid::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hybrid::Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
