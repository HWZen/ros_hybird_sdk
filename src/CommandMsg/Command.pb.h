// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Command_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Command_2eproto;
namespace hybrid {
class Advertise;
struct AdvertiseDefaultTypeInternal;
extern AdvertiseDefaultTypeInternal _Advertise_default_instance_;
class AdvertiseService;
struct AdvertiseServiceDefaultTypeInternal;
extern AdvertiseServiceDefaultTypeInternal _AdvertiseService_default_instance_;
class CallService;
struct CallServiceDefaultTypeInternal;
extern CallServiceDefaultTypeInternal _CallService_default_instance_;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Log;
struct LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class Publish;
struct PublishDefaultTypeInternal;
extern PublishDefaultTypeInternal _Publish_default_instance_;
class ResponseService;
struct ResponseServiceDefaultTypeInternal;
extern ResponseServiceDefaultTypeInternal _ResponseService_default_instance_;
class Subscribe;
struct SubscribeDefaultTypeInternal;
extern SubscribeDefaultTypeInternal _Subscribe_default_instance_;
class Unadvertise;
struct UnadvertiseDefaultTypeInternal;
extern UnadvertiseDefaultTypeInternal _Unadvertise_default_instance_;
class UnadvertiseService;
struct UnadvertiseServiceDefaultTypeInternal;
extern UnadvertiseServiceDefaultTypeInternal _UnadvertiseService_default_instance_;
class Unsubscribe;
struct UnsubscribeDefaultTypeInternal;
extern UnsubscribeDefaultTypeInternal _Unsubscribe_default_instance_;
}  // namespace hybrid
PROTOBUF_NAMESPACE_OPEN
template<> ::hybrid::Advertise* Arena::CreateMaybeMessage<::hybrid::Advertise>(Arena*);
template<> ::hybrid::AdvertiseService* Arena::CreateMaybeMessage<::hybrid::AdvertiseService>(Arena*);
template<> ::hybrid::CallService* Arena::CreateMaybeMessage<::hybrid::CallService>(Arena*);
template<> ::hybrid::Command* Arena::CreateMaybeMessage<::hybrid::Command>(Arena*);
template<> ::hybrid::Log* Arena::CreateMaybeMessage<::hybrid::Log>(Arena*);
template<> ::hybrid::Publish* Arena::CreateMaybeMessage<::hybrid::Publish>(Arena*);
template<> ::hybrid::ResponseService* Arena::CreateMaybeMessage<::hybrid::ResponseService>(Arena*);
template<> ::hybrid::Subscribe* Arena::CreateMaybeMessage<::hybrid::Subscribe>(Arena*);
template<> ::hybrid::Unadvertise* Arena::CreateMaybeMessage<::hybrid::Unadvertise>(Arena*);
template<> ::hybrid::UnadvertiseService* Arena::CreateMaybeMessage<::hybrid::UnadvertiseService>(Arena*);
template<> ::hybrid::Unsubscribe* Arena::CreateMaybeMessage<::hybrid::Unsubscribe>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hybrid {

enum Log_Level : int {
  Log_Level_DEBUG = 0,
  Log_Level_INFO = 1,
  Log_Level_WARN = 2,
  Log_Level_ERROR = 3,
  Log_Level_FATAL = 4,
  Log_Level_Log_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Log_Level_Log_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Log_Level_IsValid(int value);
constexpr Log_Level Log_Level_Level_MIN = Log_Level_DEBUG;
constexpr Log_Level Log_Level_Level_MAX = Log_Level_FATAL;
constexpr int Log_Level_Level_ARRAYSIZE = Log_Level_Level_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Log_Level_descriptor();
template<typename T>
inline const std::string& Log_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Log_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Log_Level_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Log_Level_descriptor(), enum_t_value);
}
inline bool Log_Level_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Log_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Log_Level>(
    Log_Level_descriptor(), name, value);
}
enum Command_Type : int {
  Command_Type_UNKNOWN = 0,
  Command_Type_ADVERTISE = 1,
  Command_Type_PUBLISH = 2,
  Command_Type_UNADVERTISE = 3,
  Command_Type_SUBSCRIBE = 4,
  Command_Type_UNSUBSCRIBE = 5,
  Command_Type_ADVERTISE_SERVICE = 6,
  Command_Type_CALL_SERVICE = 7,
  Command_Type_RESPONSE_SERVICE = 8,
  Command_Type_UNADVERTISE_SERVICE = 9,
  Command_Type_LOG = 10,
  Command_Type_PING = 128,
  Command_Type_Command_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Command_Type_Command_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Command_Type_IsValid(int value);
constexpr Command_Type Command_Type_Type_MIN = Command_Type_UNKNOWN;
constexpr Command_Type Command_Type_Type_MAX = Command_Type_PING;
constexpr int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_Type_descriptor();
template<typename T>
inline const std::string& Command_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_Type_descriptor(), enum_t_value);
}
inline bool Command_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
// ===================================================================

class Advertise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Advertise) */ {
 public:
  inline Advertise() : Advertise(nullptr) {}
  ~Advertise() override;
  explicit PROTOBUF_CONSTEXPR Advertise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Advertise(const Advertise& from);
  Advertise(Advertise&& from) noexcept
    : Advertise() {
    *this = ::std::move(from);
  }

  inline Advertise& operator=(const Advertise& from) {
    CopyFrom(from);
    return *this;
  }
  inline Advertise& operator=(Advertise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Advertise& default_instance() {
    return *internal_default_instance();
  }
  static inline const Advertise* internal_default_instance() {
    return reinterpret_cast<const Advertise*>(
               &_Advertise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Advertise& a, Advertise& b) {
    a.Swap(&b);
  }
  inline void Swap(Advertise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Advertise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Advertise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Advertise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Advertise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Advertise& from) {
    Advertise::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advertise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Advertise";
  }
  protected:
  explicit Advertise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kTypeFieldNumber = 2,
    kQueueSizeFieldNumber = 4,
    kLatchFieldNumber = 5,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional uint32 queue_size = 4;
  bool has_queue_size() const;
  private:
  bool _internal_has_queue_size() const;
  public:
  void clear_queue_size();
  uint32_t queue_size() const;
  void set_queue_size(uint32_t value);
  private:
  uint32_t _internal_queue_size() const;
  void _internal_set_queue_size(uint32_t value);
  public:

  // optional bool latch = 5;
  bool has_latch() const;
  private:
  bool _internal_has_latch() const;
  public:
  void clear_latch();
  bool latch() const;
  void set_latch(bool value);
  private:
  bool _internal_latch() const;
  void _internal_set_latch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Advertise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    uint32_t queue_size_;
    bool latch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Unadvertise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Unadvertise) */ {
 public:
  inline Unadvertise() : Unadvertise(nullptr) {}
  ~Unadvertise() override;
  explicit PROTOBUF_CONSTEXPR Unadvertise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Unadvertise(const Unadvertise& from);
  Unadvertise(Unadvertise&& from) noexcept
    : Unadvertise() {
    *this = ::std::move(from);
  }

  inline Unadvertise& operator=(const Unadvertise& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unadvertise& operator=(Unadvertise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Unadvertise& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unadvertise* internal_default_instance() {
    return reinterpret_cast<const Unadvertise*>(
               &_Unadvertise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Unadvertise& a, Unadvertise& b) {
    a.Swap(&b);
  }
  inline void Swap(Unadvertise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unadvertise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Unadvertise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Unadvertise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Unadvertise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Unadvertise& from) {
    Unadvertise::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unadvertise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Unadvertise";
  }
  protected:
  explicit Unadvertise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Unadvertise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Publish final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Publish) */ {
 public:
  inline Publish() : Publish(nullptr) {}
  ~Publish() override;
  explicit PROTOBUF_CONSTEXPR Publish(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Publish(const Publish& from);
  Publish(Publish&& from) noexcept
    : Publish() {
    *this = ::std::move(from);
  }

  inline Publish& operator=(const Publish& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publish& operator=(Publish&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Publish& default_instance() {
    return *internal_default_instance();
  }
  static inline const Publish* internal_default_instance() {
    return reinterpret_cast<const Publish*>(
               &_Publish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Publish& a, Publish& b) {
    a.Swap(&b);
  }
  inline void Swap(Publish* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Publish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Publish>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Publish& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Publish& from) {
    Publish::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Publish* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Publish";
  }
  protected:
  explicit Publish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Publish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Subscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Subscribe) */ {
 public:
  inline Subscribe() : Subscribe(nullptr) {}
  ~Subscribe() override;
  explicit PROTOBUF_CONSTEXPR Subscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscribe(const Subscribe& from);
  Subscribe(Subscribe&& from) noexcept
    : Subscribe() {
    *this = ::std::move(from);
  }

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe& operator=(Subscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscribe* internal_default_instance() {
    return reinterpret_cast<const Subscribe*>(
               &_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Subscribe& a, Subscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Subscribe& from) {
    Subscribe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Subscribe";
  }
  protected:
  explicit Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kTypeFieldNumber = 2,
    kQueueSizeFieldNumber = 3,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional uint32 queue_size = 3;
  bool has_queue_size() const;
  private:
  bool _internal_has_queue_size() const;
  public:
  void clear_queue_size();
  uint32_t queue_size() const;
  void set_queue_size(uint32_t value);
  private:
  uint32_t _internal_queue_size() const;
  void _internal_set_queue_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Subscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    uint32_t queue_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Unsubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Unsubscribe) */ {
 public:
  inline Unsubscribe() : Unsubscribe(nullptr) {}
  ~Unsubscribe() override;
  explicit PROTOBUF_CONSTEXPR Unsubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Unsubscribe(const Unsubscribe& from);
  Unsubscribe(Unsubscribe&& from) noexcept
    : Unsubscribe() {
    *this = ::std::move(from);
  }

  inline Unsubscribe& operator=(const Unsubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unsubscribe& operator=(Unsubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Unsubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unsubscribe* internal_default_instance() {
    return reinterpret_cast<const Unsubscribe*>(
               &_Unsubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Unsubscribe& a, Unsubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(Unsubscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unsubscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Unsubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Unsubscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Unsubscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Unsubscribe& from) {
    Unsubscribe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unsubscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Unsubscribe";
  }
  protected:
  explicit Unsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Unsubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class CallService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.CallService) */ {
 public:
  inline CallService() : CallService(nullptr) {}
  ~CallService() override;
  explicit PROTOBUF_CONSTEXPR CallService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallService(const CallService& from);
  CallService(CallService&& from) noexcept
    : CallService() {
    *this = ::std::move(from);
  }

  inline CallService& operator=(const CallService& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallService& operator=(CallService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallService& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallService* internal_default_instance() {
    return reinterpret_cast<const CallService*>(
               &_CallService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CallService& a, CallService& b) {
    a.Swap(&b);
  }
  inline void Swap(CallService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CallService& from) {
    CallService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.CallService";
  }
  protected:
  explicit CallService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kDataFieldNumber = 3,
    kSeqFieldNumber = 4,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 seq = 4;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.CallService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint64_t seq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class AdvertiseService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.AdvertiseService) */ {
 public:
  inline AdvertiseService() : AdvertiseService(nullptr) {}
  ~AdvertiseService() override;
  explicit PROTOBUF_CONSTEXPR AdvertiseService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdvertiseService(const AdvertiseService& from);
  AdvertiseService(AdvertiseService&& from) noexcept
    : AdvertiseService() {
    *this = ::std::move(from);
  }

  inline AdvertiseService& operator=(const AdvertiseService& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvertiseService& operator=(AdvertiseService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdvertiseService& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdvertiseService* internal_default_instance() {
    return reinterpret_cast<const AdvertiseService*>(
               &_AdvertiseService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AdvertiseService& a, AdvertiseService& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvertiseService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvertiseService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdvertiseService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdvertiseService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdvertiseService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdvertiseService& from) {
    AdvertiseService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvertiseService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.AdvertiseService";
  }
  protected:
  explicit AdvertiseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.AdvertiseService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class UnadvertiseService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.UnadvertiseService) */ {
 public:
  inline UnadvertiseService() : UnadvertiseService(nullptr) {}
  ~UnadvertiseService() override;
  explicit PROTOBUF_CONSTEXPR UnadvertiseService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnadvertiseService(const UnadvertiseService& from);
  UnadvertiseService(UnadvertiseService&& from) noexcept
    : UnadvertiseService() {
    *this = ::std::move(from);
  }

  inline UnadvertiseService& operator=(const UnadvertiseService& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnadvertiseService& operator=(UnadvertiseService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnadvertiseService& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnadvertiseService* internal_default_instance() {
    return reinterpret_cast<const UnadvertiseService*>(
               &_UnadvertiseService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnadvertiseService& a, UnadvertiseService& b) {
    a.Swap(&b);
  }
  inline void Swap(UnadvertiseService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnadvertiseService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnadvertiseService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnadvertiseService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnadvertiseService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnadvertiseService& from) {
    UnadvertiseService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnadvertiseService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.UnadvertiseService";
  }
  protected:
  explicit UnadvertiseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // @@protoc_insertion_point(class_scope:hybrid.UnadvertiseService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class ResponseService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.ResponseService) */ {
 public:
  inline ResponseService() : ResponseService(nullptr) {}
  ~ResponseService() override;
  explicit PROTOBUF_CONSTEXPR ResponseService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseService(const ResponseService& from);
  ResponseService(ResponseService&& from) noexcept
    : ResponseService() {
    *this = ::std::move(from);
  }

  inline ResponseService& operator=(const ResponseService& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseService& operator=(ResponseService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseService& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseService* internal_default_instance() {
    return reinterpret_cast<const ResponseService*>(
               &_ResponseService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResponseService& a, ResponseService& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseService& from) {
    ResponseService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.ResponseService";
  }
  protected:
  explicit ResponseService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kDataFieldNumber = 2,
    kSeqFieldNumber = 3,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 seq = 3;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.ResponseService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint64_t seq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Log final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Log) */ {
 public:
  inline Log() : Log(nullptr) {}
  ~Log() override;
  explicit PROTOBUF_CONSTEXPR Log(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Log& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Log& from) {
    Log::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Log";
  }
  protected:
  explicit Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Log_Level Level;
  static constexpr Level DEBUG =
    Log_Level_DEBUG;
  static constexpr Level INFO =
    Log_Level_INFO;
  static constexpr Level WARN =
    Log_Level_WARN;
  static constexpr Level ERROR =
    Log_Level_ERROR;
  static constexpr Level FATAL =
    Log_Level_FATAL;
  static inline bool Level_IsValid(int value) {
    return Log_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    Log_Level_Level_MIN;
  static constexpr Level Level_MAX =
    Log_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    Log_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Level_descriptor() {
    return Log_Level_descriptor();
  }
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return Log_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Level* value) {
    return Log_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .hybrid.Log.Level level = 1;
  void clear_level();
  ::hybrid::Log_Level level() const;
  void set_level(::hybrid::Log_Level value);
  private:
  ::hybrid::Log_Level _internal_level() const;
  void _internal_set_level(::hybrid::Log_Level value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Log)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hybrid.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command& from) {
    Command::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hybrid.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_Type Type;
  static constexpr Type UNKNOWN =
    Command_Type_UNKNOWN;
  static constexpr Type ADVERTISE =
    Command_Type_ADVERTISE;
  static constexpr Type PUBLISH =
    Command_Type_PUBLISH;
  static constexpr Type UNADVERTISE =
    Command_Type_UNADVERTISE;
  static constexpr Type SUBSCRIBE =
    Command_Type_SUBSCRIBE;
  static constexpr Type UNSUBSCRIBE =
    Command_Type_UNSUBSCRIBE;
  static constexpr Type ADVERTISE_SERVICE =
    Command_Type_ADVERTISE_SERVICE;
  static constexpr Type CALL_SERVICE =
    Command_Type_CALL_SERVICE;
  static constexpr Type RESPONSE_SERVICE =
    Command_Type_RESPONSE_SERVICE;
  static constexpr Type UNADVERTISE_SERVICE =
    Command_Type_UNADVERTISE_SERVICE;
  static constexpr Type LOG =
    Command_Type_LOG;
  static constexpr Type PING =
    Command_Type_PING;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Command_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Command_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Command_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdvertiseFieldNumber = 2,
    kPublishFieldNumber = 3,
    kUnadvertiseFieldNumber = 4,
    kSubscribeFieldNumber = 5,
    kUnsubscribeFieldNumber = 6,
    kAdvertiseServiceFieldNumber = 7,
    kCallServiceFieldNumber = 8,
    kResponseServiceFieldNumber = 9,
    kUnadvertiseServiceFieldNumber = 10,
    kLogFieldNumber = 11,
    kTypeFieldNumber = 1,
  };
  // optional .hybrid.Advertise advertise = 2;
  bool has_advertise() const;
  private:
  bool _internal_has_advertise() const;
  public:
  void clear_advertise();
  const ::hybrid::Advertise& advertise() const;
  PROTOBUF_NODISCARD ::hybrid::Advertise* release_advertise();
  ::hybrid::Advertise* mutable_advertise();
  void set_allocated_advertise(::hybrid::Advertise* advertise);
  private:
  const ::hybrid::Advertise& _internal_advertise() const;
  ::hybrid::Advertise* _internal_mutable_advertise();
  public:
  void unsafe_arena_set_allocated_advertise(
      ::hybrid::Advertise* advertise);
  ::hybrid::Advertise* unsafe_arena_release_advertise();

  // optional .hybrid.Publish publish = 3;
  bool has_publish() const;
  private:
  bool _internal_has_publish() const;
  public:
  void clear_publish();
  const ::hybrid::Publish& publish() const;
  PROTOBUF_NODISCARD ::hybrid::Publish* release_publish();
  ::hybrid::Publish* mutable_publish();
  void set_allocated_publish(::hybrid::Publish* publish);
  private:
  const ::hybrid::Publish& _internal_publish() const;
  ::hybrid::Publish* _internal_mutable_publish();
  public:
  void unsafe_arena_set_allocated_publish(
      ::hybrid::Publish* publish);
  ::hybrid::Publish* unsafe_arena_release_publish();

  // optional .hybrid.Unadvertise unadvertise = 4;
  bool has_unadvertise() const;
  private:
  bool _internal_has_unadvertise() const;
  public:
  void clear_unadvertise();
  const ::hybrid::Unadvertise& unadvertise() const;
  PROTOBUF_NODISCARD ::hybrid::Unadvertise* release_unadvertise();
  ::hybrid::Unadvertise* mutable_unadvertise();
  void set_allocated_unadvertise(::hybrid::Unadvertise* unadvertise);
  private:
  const ::hybrid::Unadvertise& _internal_unadvertise() const;
  ::hybrid::Unadvertise* _internal_mutable_unadvertise();
  public:
  void unsafe_arena_set_allocated_unadvertise(
      ::hybrid::Unadvertise* unadvertise);
  ::hybrid::Unadvertise* unsafe_arena_release_unadvertise();

  // optional .hybrid.Subscribe subscribe = 5;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  const ::hybrid::Subscribe& subscribe() const;
  PROTOBUF_NODISCARD ::hybrid::Subscribe* release_subscribe();
  ::hybrid::Subscribe* mutable_subscribe();
  void set_allocated_subscribe(::hybrid::Subscribe* subscribe);
  private:
  const ::hybrid::Subscribe& _internal_subscribe() const;
  ::hybrid::Subscribe* _internal_mutable_subscribe();
  public:
  void unsafe_arena_set_allocated_subscribe(
      ::hybrid::Subscribe* subscribe);
  ::hybrid::Subscribe* unsafe_arena_release_subscribe();

  // optional .hybrid.Unsubscribe unsubscribe = 6;
  bool has_unsubscribe() const;
  private:
  bool _internal_has_unsubscribe() const;
  public:
  void clear_unsubscribe();
  const ::hybrid::Unsubscribe& unsubscribe() const;
  PROTOBUF_NODISCARD ::hybrid::Unsubscribe* release_unsubscribe();
  ::hybrid::Unsubscribe* mutable_unsubscribe();
  void set_allocated_unsubscribe(::hybrid::Unsubscribe* unsubscribe);
  private:
  const ::hybrid::Unsubscribe& _internal_unsubscribe() const;
  ::hybrid::Unsubscribe* _internal_mutable_unsubscribe();
  public:
  void unsafe_arena_set_allocated_unsubscribe(
      ::hybrid::Unsubscribe* unsubscribe);
  ::hybrid::Unsubscribe* unsafe_arena_release_unsubscribe();

  // optional .hybrid.AdvertiseService advertise_service = 7;
  bool has_advertise_service() const;
  private:
  bool _internal_has_advertise_service() const;
  public:
  void clear_advertise_service();
  const ::hybrid::AdvertiseService& advertise_service() const;
  PROTOBUF_NODISCARD ::hybrid::AdvertiseService* release_advertise_service();
  ::hybrid::AdvertiseService* mutable_advertise_service();
  void set_allocated_advertise_service(::hybrid::AdvertiseService* advertise_service);
  private:
  const ::hybrid::AdvertiseService& _internal_advertise_service() const;
  ::hybrid::AdvertiseService* _internal_mutable_advertise_service();
  public:
  void unsafe_arena_set_allocated_advertise_service(
      ::hybrid::AdvertiseService* advertise_service);
  ::hybrid::AdvertiseService* unsafe_arena_release_advertise_service();

  // optional .hybrid.CallService call_service = 8;
  bool has_call_service() const;
  private:
  bool _internal_has_call_service() const;
  public:
  void clear_call_service();
  const ::hybrid::CallService& call_service() const;
  PROTOBUF_NODISCARD ::hybrid::CallService* release_call_service();
  ::hybrid::CallService* mutable_call_service();
  void set_allocated_call_service(::hybrid::CallService* call_service);
  private:
  const ::hybrid::CallService& _internal_call_service() const;
  ::hybrid::CallService* _internal_mutable_call_service();
  public:
  void unsafe_arena_set_allocated_call_service(
      ::hybrid::CallService* call_service);
  ::hybrid::CallService* unsafe_arena_release_call_service();

  // optional .hybrid.ResponseService response_service = 9;
  bool has_response_service() const;
  private:
  bool _internal_has_response_service() const;
  public:
  void clear_response_service();
  const ::hybrid::ResponseService& response_service() const;
  PROTOBUF_NODISCARD ::hybrid::ResponseService* release_response_service();
  ::hybrid::ResponseService* mutable_response_service();
  void set_allocated_response_service(::hybrid::ResponseService* response_service);
  private:
  const ::hybrid::ResponseService& _internal_response_service() const;
  ::hybrid::ResponseService* _internal_mutable_response_service();
  public:
  void unsafe_arena_set_allocated_response_service(
      ::hybrid::ResponseService* response_service);
  ::hybrid::ResponseService* unsafe_arena_release_response_service();

  // optional .hybrid.UnadvertiseService unadvertise_service = 10;
  bool has_unadvertise_service() const;
  private:
  bool _internal_has_unadvertise_service() const;
  public:
  void clear_unadvertise_service();
  const ::hybrid::UnadvertiseService& unadvertise_service() const;
  PROTOBUF_NODISCARD ::hybrid::UnadvertiseService* release_unadvertise_service();
  ::hybrid::UnadvertiseService* mutable_unadvertise_service();
  void set_allocated_unadvertise_service(::hybrid::UnadvertiseService* unadvertise_service);
  private:
  const ::hybrid::UnadvertiseService& _internal_unadvertise_service() const;
  ::hybrid::UnadvertiseService* _internal_mutable_unadvertise_service();
  public:
  void unsafe_arena_set_allocated_unadvertise_service(
      ::hybrid::UnadvertiseService* unadvertise_service);
  ::hybrid::UnadvertiseService* unsafe_arena_release_unadvertise_service();

  // optional .hybrid.Log log = 11;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::hybrid::Log& log() const;
  PROTOBUF_NODISCARD ::hybrid::Log* release_log();
  ::hybrid::Log* mutable_log();
  void set_allocated_log(::hybrid::Log* log);
  private:
  const ::hybrid::Log& _internal_log() const;
  ::hybrid::Log* _internal_mutable_log();
  public:
  void unsafe_arena_set_allocated_log(
      ::hybrid::Log* log);
  ::hybrid::Log* unsafe_arena_release_log();

  // .hybrid.Command.Type type = 1;
  void clear_type();
  ::hybrid::Command_Type type() const;
  void set_type(::hybrid::Command_Type value);
  private:
  ::hybrid::Command_Type _internal_type() const;
  void _internal_set_type(::hybrid::Command_Type value);
  public:

  // @@protoc_insertion_point(class_scope:hybrid.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::hybrid::Advertise* advertise_;
    ::hybrid::Publish* publish_;
    ::hybrid::Unadvertise* unadvertise_;
    ::hybrid::Subscribe* subscribe_;
    ::hybrid::Unsubscribe* unsubscribe_;
    ::hybrid::AdvertiseService* advertise_service_;
    ::hybrid::CallService* call_service_;
    ::hybrid::ResponseService* response_service_;
    ::hybrid::UnadvertiseService* unadvertise_service_;
    ::hybrid::Log* log_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Advertise

// string topic = 1;
inline void Advertise::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Advertise::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Advertise.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Advertise::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Advertise.topic)
}
inline std::string* Advertise::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Advertise.topic)
  return _s;
}
inline const std::string& Advertise::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Advertise::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Advertise::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Advertise::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Advertise.topic)
  return _impl_.topic_.Release();
}
inline void Advertise::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Advertise.topic)
}

// string type = 2;
inline void Advertise::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Advertise::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Advertise.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Advertise::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Advertise.type)
}
inline std::string* Advertise::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:hybrid.Advertise.type)
  return _s;
}
inline const std::string& Advertise::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Advertise::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Advertise::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Advertise::release_type() {
  // @@protoc_insertion_point(field_release:hybrid.Advertise.type)
  return _impl_.type_.Release();
}
inline void Advertise::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Advertise.type)
}

// optional uint32 queue_size = 4;
inline bool Advertise::_internal_has_queue_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Advertise::has_queue_size() const {
  return _internal_has_queue_size();
}
inline void Advertise::clear_queue_size() {
  _impl_.queue_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Advertise::_internal_queue_size() const {
  return _impl_.queue_size_;
}
inline uint32_t Advertise::queue_size() const {
  // @@protoc_insertion_point(field_get:hybrid.Advertise.queue_size)
  return _internal_queue_size();
}
inline void Advertise::_internal_set_queue_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.queue_size_ = value;
}
inline void Advertise::set_queue_size(uint32_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:hybrid.Advertise.queue_size)
}

// optional bool latch = 5;
inline bool Advertise::_internal_has_latch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Advertise::has_latch() const {
  return _internal_has_latch();
}
inline void Advertise::clear_latch() {
  _impl_.latch_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Advertise::_internal_latch() const {
  return _impl_.latch_;
}
inline bool Advertise::latch() const {
  // @@protoc_insertion_point(field_get:hybrid.Advertise.latch)
  return _internal_latch();
}
inline void Advertise::_internal_set_latch(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.latch_ = value;
}
inline void Advertise::set_latch(bool value) {
  _internal_set_latch(value);
  // @@protoc_insertion_point(field_set:hybrid.Advertise.latch)
}

// -------------------------------------------------------------------

// Unadvertise

// string topic = 1;
inline void Unadvertise::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Unadvertise::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Unadvertise.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unadvertise::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Unadvertise.topic)
}
inline std::string* Unadvertise::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Unadvertise.topic)
  return _s;
}
inline const std::string& Unadvertise::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Unadvertise::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Unadvertise::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Unadvertise::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Unadvertise.topic)
  return _impl_.topic_.Release();
}
inline void Unadvertise::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Unadvertise.topic)
}

// -------------------------------------------------------------------

// Publish

// string topic = 1;
inline void Publish::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Publish::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Publish.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publish::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Publish.topic)
}
inline std::string* Publish::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Publish.topic)
  return _s;
}
inline const std::string& Publish::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Publish::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Publish::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Publish::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Publish.topic)
  return _impl_.topic_.Release();
}
inline void Publish::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Publish.topic)
}

// string type = 2;
inline void Publish::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Publish::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Publish.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publish::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Publish.type)
}
inline std::string* Publish::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:hybrid.Publish.type)
  return _s;
}
inline const std::string& Publish::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Publish::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Publish::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Publish::release_type() {
  // @@protoc_insertion_point(field_release:hybrid.Publish.type)
  return _impl_.type_.Release();
}
inline void Publish::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Publish.type)
}

// bytes data = 3;
inline void Publish::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Publish::data() const {
  // @@protoc_insertion_point(field_get:hybrid.Publish.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publish::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Publish.data)
}
inline std::string* Publish::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hybrid.Publish.data)
  return _s;
}
inline const std::string& Publish::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Publish::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Publish::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Publish::release_data() {
  // @@protoc_insertion_point(field_release:hybrid.Publish.data)
  return _impl_.data_.Release();
}
inline void Publish::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Publish.data)
}

// -------------------------------------------------------------------

// Subscribe

// string topic = 1;
inline void Subscribe::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Subscribe::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Subscribe.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subscribe::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Subscribe.topic)
}
inline std::string* Subscribe::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Subscribe.topic)
  return _s;
}
inline const std::string& Subscribe::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Subscribe::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Subscribe::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Subscribe::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Subscribe.topic)
  return _impl_.topic_.Release();
}
inline void Subscribe::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Subscribe.topic)
}

// string type = 2;
inline void Subscribe::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Subscribe::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Subscribe.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subscribe::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Subscribe.type)
}
inline std::string* Subscribe::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:hybrid.Subscribe.type)
  return _s;
}
inline const std::string& Subscribe::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Subscribe::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Subscribe::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Subscribe::release_type() {
  // @@protoc_insertion_point(field_release:hybrid.Subscribe.type)
  return _impl_.type_.Release();
}
inline void Subscribe::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Subscribe.type)
}

// optional uint32 queue_size = 3;
inline bool Subscribe::_internal_has_queue_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Subscribe::has_queue_size() const {
  return _internal_has_queue_size();
}
inline void Subscribe::clear_queue_size() {
  _impl_.queue_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Subscribe::_internal_queue_size() const {
  return _impl_.queue_size_;
}
inline uint32_t Subscribe::queue_size() const {
  // @@protoc_insertion_point(field_get:hybrid.Subscribe.queue_size)
  return _internal_queue_size();
}
inline void Subscribe::_internal_set_queue_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.queue_size_ = value;
}
inline void Subscribe::set_queue_size(uint32_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:hybrid.Subscribe.queue_size)
}

// -------------------------------------------------------------------

// Unsubscribe

// string topic = 1;
inline void Unsubscribe::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Unsubscribe::topic() const {
  // @@protoc_insertion_point(field_get:hybrid.Unsubscribe.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unsubscribe::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Unsubscribe.topic)
}
inline std::string* Unsubscribe::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:hybrid.Unsubscribe.topic)
  return _s;
}
inline const std::string& Unsubscribe::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Unsubscribe::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Unsubscribe::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Unsubscribe::release_topic() {
  // @@protoc_insertion_point(field_release:hybrid.Unsubscribe.topic)
  return _impl_.topic_.Release();
}
inline void Unsubscribe::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Unsubscribe.topic)
}

// -------------------------------------------------------------------

// CallService

// string service = 1;
inline void CallService::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& CallService::service() const {
  // @@protoc_insertion_point(field_get:hybrid.CallService.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallService::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.CallService.service)
}
inline std::string* CallService::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:hybrid.CallService.service)
  return _s;
}
inline const std::string& CallService::_internal_service() const {
  return _impl_.service_.Get();
}
inline void CallService::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* CallService::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* CallService::release_service() {
  // @@protoc_insertion_point(field_release:hybrid.CallService.service)
  return _impl_.service_.Release();
}
inline void CallService::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.CallService.service)
}

// bytes data = 3;
inline void CallService::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CallService::data() const {
  // @@protoc_insertion_point(field_get:hybrid.CallService.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallService::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.CallService.data)
}
inline std::string* CallService::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hybrid.CallService.data)
  return _s;
}
inline const std::string& CallService::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CallService::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CallService::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CallService::release_data() {
  // @@protoc_insertion_point(field_release:hybrid.CallService.data)
  return _impl_.data_.Release();
}
inline void CallService::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.CallService.data)
}

// uint64 seq = 4;
inline void CallService::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t CallService::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t CallService::seq() const {
  // @@protoc_insertion_point(field_get:hybrid.CallService.seq)
  return _internal_seq();
}
inline void CallService::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void CallService::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:hybrid.CallService.seq)
}

// -------------------------------------------------------------------

// AdvertiseService

// string service = 1;
inline void AdvertiseService::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& AdvertiseService::service() const {
  // @@protoc_insertion_point(field_get:hybrid.AdvertiseService.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdvertiseService::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.AdvertiseService.service)
}
inline std::string* AdvertiseService::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:hybrid.AdvertiseService.service)
  return _s;
}
inline const std::string& AdvertiseService::_internal_service() const {
  return _impl_.service_.Get();
}
inline void AdvertiseService::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* AdvertiseService::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* AdvertiseService::release_service() {
  // @@protoc_insertion_point(field_release:hybrid.AdvertiseService.service)
  return _impl_.service_.Release();
}
inline void AdvertiseService::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.AdvertiseService.service)
}

// string type = 2;
inline void AdvertiseService::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& AdvertiseService::type() const {
  // @@protoc_insertion_point(field_get:hybrid.AdvertiseService.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdvertiseService::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.AdvertiseService.type)
}
inline std::string* AdvertiseService::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:hybrid.AdvertiseService.type)
  return _s;
}
inline const std::string& AdvertiseService::_internal_type() const {
  return _impl_.type_.Get();
}
inline void AdvertiseService::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* AdvertiseService::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* AdvertiseService::release_type() {
  // @@protoc_insertion_point(field_release:hybrid.AdvertiseService.type)
  return _impl_.type_.Release();
}
inline void AdvertiseService::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.AdvertiseService.type)
}

// -------------------------------------------------------------------

// UnadvertiseService

// string service = 1;
inline void UnadvertiseService::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& UnadvertiseService::service() const {
  // @@protoc_insertion_point(field_get:hybrid.UnadvertiseService.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnadvertiseService::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.UnadvertiseService.service)
}
inline std::string* UnadvertiseService::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:hybrid.UnadvertiseService.service)
  return _s;
}
inline const std::string& UnadvertiseService::_internal_service() const {
  return _impl_.service_.Get();
}
inline void UnadvertiseService::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* UnadvertiseService::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* UnadvertiseService::release_service() {
  // @@protoc_insertion_point(field_release:hybrid.UnadvertiseService.service)
  return _impl_.service_.Release();
}
inline void UnadvertiseService::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.UnadvertiseService.service)
}

// -------------------------------------------------------------------

// ResponseService

// string service = 1;
inline void ResponseService::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& ResponseService::service() const {
  // @@protoc_insertion_point(field_get:hybrid.ResponseService.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseService::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.ResponseService.service)
}
inline std::string* ResponseService::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:hybrid.ResponseService.service)
  return _s;
}
inline const std::string& ResponseService::_internal_service() const {
  return _impl_.service_.Get();
}
inline void ResponseService::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseService::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseService::release_service() {
  // @@protoc_insertion_point(field_release:hybrid.ResponseService.service)
  return _impl_.service_.Release();
}
inline void ResponseService::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.ResponseService.service)
}

// bytes data = 2;
inline void ResponseService::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ResponseService::data() const {
  // @@protoc_insertion_point(field_get:hybrid.ResponseService.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseService::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.ResponseService.data)
}
inline std::string* ResponseService::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hybrid.ResponseService.data)
  return _s;
}
inline const std::string& ResponseService::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ResponseService::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseService::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseService::release_data() {
  // @@protoc_insertion_point(field_release:hybrid.ResponseService.data)
  return _impl_.data_.Release();
}
inline void ResponseService::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.ResponseService.data)
}

// uint64 seq = 3;
inline void ResponseService::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t ResponseService::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t ResponseService::seq() const {
  // @@protoc_insertion_point(field_get:hybrid.ResponseService.seq)
  return _internal_seq();
}
inline void ResponseService::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void ResponseService::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:hybrid.ResponseService.seq)
}

// -------------------------------------------------------------------

// Log

// .hybrid.Log.Level level = 1;
inline void Log::clear_level() {
  _impl_.level_ = 0;
}
inline ::hybrid::Log_Level Log::_internal_level() const {
  return static_cast< ::hybrid::Log_Level >(_impl_.level_);
}
inline ::hybrid::Log_Level Log::level() const {
  // @@protoc_insertion_point(field_get:hybrid.Log.level)
  return _internal_level();
}
inline void Log::_internal_set_level(::hybrid::Log_Level value) {
  
  _impl_.level_ = value;
}
inline void Log::set_level(::hybrid::Log_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:hybrid.Log.level)
}

// string message = 2;
inline void Log::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Log::message() const {
  // @@protoc_insertion_point(field_get:hybrid.Log.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Log::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hybrid.Log.message)
}
inline std::string* Log::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:hybrid.Log.message)
  return _s;
}
inline const std::string& Log::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Log::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Log::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Log::release_message() {
  // @@protoc_insertion_point(field_release:hybrid.Log.message)
  return _impl_.message_.Release();
}
inline void Log::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hybrid.Log.message)
}

// -------------------------------------------------------------------

// Command

// .hybrid.Command.Type type = 1;
inline void Command::clear_type() {
  _impl_.type_ = 0;
}
inline ::hybrid::Command_Type Command::_internal_type() const {
  return static_cast< ::hybrid::Command_Type >(_impl_.type_);
}
inline ::hybrid::Command_Type Command::type() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.type)
  return _internal_type();
}
inline void Command::_internal_set_type(::hybrid::Command_Type value) {
  
  _impl_.type_ = value;
}
inline void Command::set_type(::hybrid::Command_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hybrid.Command.type)
}

// optional .hybrid.Advertise advertise = 2;
inline bool Command::_internal_has_advertise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advertise_ != nullptr);
  return value;
}
inline bool Command::has_advertise() const {
  return _internal_has_advertise();
}
inline void Command::clear_advertise() {
  if (_impl_.advertise_ != nullptr) _impl_.advertise_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::hybrid::Advertise& Command::_internal_advertise() const {
  const ::hybrid::Advertise* p = _impl_.advertise_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Advertise&>(
      ::hybrid::_Advertise_default_instance_);
}
inline const ::hybrid::Advertise& Command::advertise() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.advertise)
  return _internal_advertise();
}
inline void Command::unsafe_arena_set_allocated_advertise(
    ::hybrid::Advertise* advertise) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advertise_);
  }
  _impl_.advertise_ = advertise;
  if (advertise) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.advertise)
}
inline ::hybrid::Advertise* Command::release_advertise() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hybrid::Advertise* temp = _impl_.advertise_;
  _impl_.advertise_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Advertise* Command::unsafe_arena_release_advertise() {
  // @@protoc_insertion_point(field_release:hybrid.Command.advertise)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hybrid::Advertise* temp = _impl_.advertise_;
  _impl_.advertise_ = nullptr;
  return temp;
}
inline ::hybrid::Advertise* Command::_internal_mutable_advertise() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advertise_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Advertise>(GetArenaForAllocation());
    _impl_.advertise_ = p;
  }
  return _impl_.advertise_;
}
inline ::hybrid::Advertise* Command::mutable_advertise() {
  ::hybrid::Advertise* _msg = _internal_mutable_advertise();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.advertise)
  return _msg;
}
inline void Command::set_allocated_advertise(::hybrid::Advertise* advertise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.advertise_;
  }
  if (advertise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advertise);
    if (message_arena != submessage_arena) {
      advertise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advertise, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advertise_ = advertise;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.advertise)
}

// optional .hybrid.Publish publish = 3;
inline bool Command::_internal_has_publish() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.publish_ != nullptr);
  return value;
}
inline bool Command::has_publish() const {
  return _internal_has_publish();
}
inline void Command::clear_publish() {
  if (_impl_.publish_ != nullptr) _impl_.publish_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::hybrid::Publish& Command::_internal_publish() const {
  const ::hybrid::Publish* p = _impl_.publish_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Publish&>(
      ::hybrid::_Publish_default_instance_);
}
inline const ::hybrid::Publish& Command::publish() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.publish)
  return _internal_publish();
}
inline void Command::unsafe_arena_set_allocated_publish(
    ::hybrid::Publish* publish) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publish_);
  }
  _impl_.publish_ = publish;
  if (publish) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.publish)
}
inline ::hybrid::Publish* Command::release_publish() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hybrid::Publish* temp = _impl_.publish_;
  _impl_.publish_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Publish* Command::unsafe_arena_release_publish() {
  // @@protoc_insertion_point(field_release:hybrid.Command.publish)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hybrid::Publish* temp = _impl_.publish_;
  _impl_.publish_ = nullptr;
  return temp;
}
inline ::hybrid::Publish* Command::_internal_mutable_publish() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.publish_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Publish>(GetArenaForAllocation());
    _impl_.publish_ = p;
  }
  return _impl_.publish_;
}
inline ::hybrid::Publish* Command::mutable_publish() {
  ::hybrid::Publish* _msg = _internal_mutable_publish();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.publish)
  return _msg;
}
inline void Command::set_allocated_publish(::hybrid::Publish* publish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.publish_;
  }
  if (publish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(publish);
    if (message_arena != submessage_arena) {
      publish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.publish_ = publish;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.publish)
}

// optional .hybrid.Unadvertise unadvertise = 4;
inline bool Command::_internal_has_unadvertise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unadvertise_ != nullptr);
  return value;
}
inline bool Command::has_unadvertise() const {
  return _internal_has_unadvertise();
}
inline void Command::clear_unadvertise() {
  if (_impl_.unadvertise_ != nullptr) _impl_.unadvertise_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::hybrid::Unadvertise& Command::_internal_unadvertise() const {
  const ::hybrid::Unadvertise* p = _impl_.unadvertise_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Unadvertise&>(
      ::hybrid::_Unadvertise_default_instance_);
}
inline const ::hybrid::Unadvertise& Command::unadvertise() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.unadvertise)
  return _internal_unadvertise();
}
inline void Command::unsafe_arena_set_allocated_unadvertise(
    ::hybrid::Unadvertise* unadvertise) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unadvertise_);
  }
  _impl_.unadvertise_ = unadvertise;
  if (unadvertise) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.unadvertise)
}
inline ::hybrid::Unadvertise* Command::release_unadvertise() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::hybrid::Unadvertise* temp = _impl_.unadvertise_;
  _impl_.unadvertise_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Unadvertise* Command::unsafe_arena_release_unadvertise() {
  // @@protoc_insertion_point(field_release:hybrid.Command.unadvertise)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::hybrid::Unadvertise* temp = _impl_.unadvertise_;
  _impl_.unadvertise_ = nullptr;
  return temp;
}
inline ::hybrid::Unadvertise* Command::_internal_mutable_unadvertise() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.unadvertise_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Unadvertise>(GetArenaForAllocation());
    _impl_.unadvertise_ = p;
  }
  return _impl_.unadvertise_;
}
inline ::hybrid::Unadvertise* Command::mutable_unadvertise() {
  ::hybrid::Unadvertise* _msg = _internal_mutable_unadvertise();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.unadvertise)
  return _msg;
}
inline void Command::set_allocated_unadvertise(::hybrid::Unadvertise* unadvertise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unadvertise_;
  }
  if (unadvertise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unadvertise);
    if (message_arena != submessage_arena) {
      unadvertise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unadvertise, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.unadvertise_ = unadvertise;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.unadvertise)
}

// optional .hybrid.Subscribe subscribe = 5;
inline bool Command::_internal_has_subscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_ != nullptr);
  return value;
}
inline bool Command::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void Command::clear_subscribe() {
  if (_impl_.subscribe_ != nullptr) _impl_.subscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::hybrid::Subscribe& Command::_internal_subscribe() const {
  const ::hybrid::Subscribe* p = _impl_.subscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Subscribe&>(
      ::hybrid::_Subscribe_default_instance_);
}
inline const ::hybrid::Subscribe& Command::subscribe() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.subscribe)
  return _internal_subscribe();
}
inline void Command::unsafe_arena_set_allocated_subscribe(
    ::hybrid::Subscribe* subscribe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subscribe_);
  }
  _impl_.subscribe_ = subscribe;
  if (subscribe) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.subscribe)
}
inline ::hybrid::Subscribe* Command::release_subscribe() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::hybrid::Subscribe* temp = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Subscribe* Command::unsafe_arena_release_subscribe() {
  // @@protoc_insertion_point(field_release:hybrid.Command.subscribe)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::hybrid::Subscribe* temp = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
  return temp;
}
inline ::hybrid::Subscribe* Command::_internal_mutable_subscribe() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.subscribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Subscribe>(GetArenaForAllocation());
    _impl_.subscribe_ = p;
  }
  return _impl_.subscribe_;
}
inline ::hybrid::Subscribe* Command::mutable_subscribe() {
  ::hybrid::Subscribe* _msg = _internal_mutable_subscribe();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.subscribe)
  return _msg;
}
inline void Command::set_allocated_subscribe(::hybrid::Subscribe* subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subscribe_;
  }
  if (subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe);
    if (message_arena != submessage_arena) {
      subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.subscribe_ = subscribe;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.subscribe)
}

// optional .hybrid.Unsubscribe unsubscribe = 6;
inline bool Command::_internal_has_unsubscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unsubscribe_ != nullptr);
  return value;
}
inline bool Command::has_unsubscribe() const {
  return _internal_has_unsubscribe();
}
inline void Command::clear_unsubscribe() {
  if (_impl_.unsubscribe_ != nullptr) _impl_.unsubscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::hybrid::Unsubscribe& Command::_internal_unsubscribe() const {
  const ::hybrid::Unsubscribe* p = _impl_.unsubscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Unsubscribe&>(
      ::hybrid::_Unsubscribe_default_instance_);
}
inline const ::hybrid::Unsubscribe& Command::unsubscribe() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.unsubscribe)
  return _internal_unsubscribe();
}
inline void Command::unsafe_arena_set_allocated_unsubscribe(
    ::hybrid::Unsubscribe* unsubscribe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsubscribe_);
  }
  _impl_.unsubscribe_ = unsubscribe;
  if (unsubscribe) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.unsubscribe)
}
inline ::hybrid::Unsubscribe* Command::release_unsubscribe() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::hybrid::Unsubscribe* temp = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Unsubscribe* Command::unsafe_arena_release_unsubscribe() {
  // @@protoc_insertion_point(field_release:hybrid.Command.unsubscribe)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::hybrid::Unsubscribe* temp = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
  return temp;
}
inline ::hybrid::Unsubscribe* Command::_internal_mutable_unsubscribe() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.unsubscribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Unsubscribe>(GetArenaForAllocation());
    _impl_.unsubscribe_ = p;
  }
  return _impl_.unsubscribe_;
}
inline ::hybrid::Unsubscribe* Command::mutable_unsubscribe() {
  ::hybrid::Unsubscribe* _msg = _internal_mutable_unsubscribe();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.unsubscribe)
  return _msg;
}
inline void Command::set_allocated_unsubscribe(::hybrid::Unsubscribe* unsubscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unsubscribe_;
  }
  if (unsubscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unsubscribe);
    if (message_arena != submessage_arena) {
      unsubscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsubscribe, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.unsubscribe_ = unsubscribe;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.unsubscribe)
}

// optional .hybrid.AdvertiseService advertise_service = 7;
inline bool Command::_internal_has_advertise_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advertise_service_ != nullptr);
  return value;
}
inline bool Command::has_advertise_service() const {
  return _internal_has_advertise_service();
}
inline void Command::clear_advertise_service() {
  if (_impl_.advertise_service_ != nullptr) _impl_.advertise_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::hybrid::AdvertiseService& Command::_internal_advertise_service() const {
  const ::hybrid::AdvertiseService* p = _impl_.advertise_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::AdvertiseService&>(
      ::hybrid::_AdvertiseService_default_instance_);
}
inline const ::hybrid::AdvertiseService& Command::advertise_service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.advertise_service)
  return _internal_advertise_service();
}
inline void Command::unsafe_arena_set_allocated_advertise_service(
    ::hybrid::AdvertiseService* advertise_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advertise_service_);
  }
  _impl_.advertise_service_ = advertise_service;
  if (advertise_service) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.advertise_service)
}
inline ::hybrid::AdvertiseService* Command::release_advertise_service() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::hybrid::AdvertiseService* temp = _impl_.advertise_service_;
  _impl_.advertise_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::AdvertiseService* Command::unsafe_arena_release_advertise_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.advertise_service)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::hybrid::AdvertiseService* temp = _impl_.advertise_service_;
  _impl_.advertise_service_ = nullptr;
  return temp;
}
inline ::hybrid::AdvertiseService* Command::_internal_mutable_advertise_service() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.advertise_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::AdvertiseService>(GetArenaForAllocation());
    _impl_.advertise_service_ = p;
  }
  return _impl_.advertise_service_;
}
inline ::hybrid::AdvertiseService* Command::mutable_advertise_service() {
  ::hybrid::AdvertiseService* _msg = _internal_mutable_advertise_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.advertise_service)
  return _msg;
}
inline void Command::set_allocated_advertise_service(::hybrid::AdvertiseService* advertise_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.advertise_service_;
  }
  if (advertise_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advertise_service);
    if (message_arena != submessage_arena) {
      advertise_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advertise_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.advertise_service_ = advertise_service;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.advertise_service)
}

// optional .hybrid.CallService call_service = 8;
inline bool Command::_internal_has_call_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.call_service_ != nullptr);
  return value;
}
inline bool Command::has_call_service() const {
  return _internal_has_call_service();
}
inline void Command::clear_call_service() {
  if (_impl_.call_service_ != nullptr) _impl_.call_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::hybrid::CallService& Command::_internal_call_service() const {
  const ::hybrid::CallService* p = _impl_.call_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::CallService&>(
      ::hybrid::_CallService_default_instance_);
}
inline const ::hybrid::CallService& Command::call_service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.call_service)
  return _internal_call_service();
}
inline void Command::unsafe_arena_set_allocated_call_service(
    ::hybrid::CallService* call_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.call_service_);
  }
  _impl_.call_service_ = call_service;
  if (call_service) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.call_service)
}
inline ::hybrid::CallService* Command::release_call_service() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::hybrid::CallService* temp = _impl_.call_service_;
  _impl_.call_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::CallService* Command::unsafe_arena_release_call_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.call_service)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::hybrid::CallService* temp = _impl_.call_service_;
  _impl_.call_service_ = nullptr;
  return temp;
}
inline ::hybrid::CallService* Command::_internal_mutable_call_service() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.call_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::CallService>(GetArenaForAllocation());
    _impl_.call_service_ = p;
  }
  return _impl_.call_service_;
}
inline ::hybrid::CallService* Command::mutable_call_service() {
  ::hybrid::CallService* _msg = _internal_mutable_call_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.call_service)
  return _msg;
}
inline void Command::set_allocated_call_service(::hybrid::CallService* call_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.call_service_;
  }
  if (call_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(call_service);
    if (message_arena != submessage_arena) {
      call_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.call_service_ = call_service;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.call_service)
}

// optional .hybrid.ResponseService response_service = 9;
inline bool Command::_internal_has_response_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_service_ != nullptr);
  return value;
}
inline bool Command::has_response_service() const {
  return _internal_has_response_service();
}
inline void Command::clear_response_service() {
  if (_impl_.response_service_ != nullptr) _impl_.response_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::hybrid::ResponseService& Command::_internal_response_service() const {
  const ::hybrid::ResponseService* p = _impl_.response_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::ResponseService&>(
      ::hybrid::_ResponseService_default_instance_);
}
inline const ::hybrid::ResponseService& Command::response_service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.response_service)
  return _internal_response_service();
}
inline void Command::unsafe_arena_set_allocated_response_service(
    ::hybrid::ResponseService* response_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_service_);
  }
  _impl_.response_service_ = response_service;
  if (response_service) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.response_service)
}
inline ::hybrid::ResponseService* Command::release_response_service() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::hybrid::ResponseService* temp = _impl_.response_service_;
  _impl_.response_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::ResponseService* Command::unsafe_arena_release_response_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.response_service)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::hybrid::ResponseService* temp = _impl_.response_service_;
  _impl_.response_service_ = nullptr;
  return temp;
}
inline ::hybrid::ResponseService* Command::_internal_mutable_response_service() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.response_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::ResponseService>(GetArenaForAllocation());
    _impl_.response_service_ = p;
  }
  return _impl_.response_service_;
}
inline ::hybrid::ResponseService* Command::mutable_response_service() {
  ::hybrid::ResponseService* _msg = _internal_mutable_response_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.response_service)
  return _msg;
}
inline void Command::set_allocated_response_service(::hybrid::ResponseService* response_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_service_;
  }
  if (response_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response_service);
    if (message_arena != submessage_arena) {
      response_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.response_service_ = response_service;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.response_service)
}

// optional .hybrid.UnadvertiseService unadvertise_service = 10;
inline bool Command::_internal_has_unadvertise_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unadvertise_service_ != nullptr);
  return value;
}
inline bool Command::has_unadvertise_service() const {
  return _internal_has_unadvertise_service();
}
inline void Command::clear_unadvertise_service() {
  if (_impl_.unadvertise_service_ != nullptr) _impl_.unadvertise_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::hybrid::UnadvertiseService& Command::_internal_unadvertise_service() const {
  const ::hybrid::UnadvertiseService* p = _impl_.unadvertise_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::UnadvertiseService&>(
      ::hybrid::_UnadvertiseService_default_instance_);
}
inline const ::hybrid::UnadvertiseService& Command::unadvertise_service() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.unadvertise_service)
  return _internal_unadvertise_service();
}
inline void Command::unsafe_arena_set_allocated_unadvertise_service(
    ::hybrid::UnadvertiseService* unadvertise_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unadvertise_service_);
  }
  _impl_.unadvertise_service_ = unadvertise_service;
  if (unadvertise_service) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.unadvertise_service)
}
inline ::hybrid::UnadvertiseService* Command::release_unadvertise_service() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::hybrid::UnadvertiseService* temp = _impl_.unadvertise_service_;
  _impl_.unadvertise_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::UnadvertiseService* Command::unsafe_arena_release_unadvertise_service() {
  // @@protoc_insertion_point(field_release:hybrid.Command.unadvertise_service)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::hybrid::UnadvertiseService* temp = _impl_.unadvertise_service_;
  _impl_.unadvertise_service_ = nullptr;
  return temp;
}
inline ::hybrid::UnadvertiseService* Command::_internal_mutable_unadvertise_service() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.unadvertise_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::UnadvertiseService>(GetArenaForAllocation());
    _impl_.unadvertise_service_ = p;
  }
  return _impl_.unadvertise_service_;
}
inline ::hybrid::UnadvertiseService* Command::mutable_unadvertise_service() {
  ::hybrid::UnadvertiseService* _msg = _internal_mutable_unadvertise_service();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.unadvertise_service)
  return _msg;
}
inline void Command::set_allocated_unadvertise_service(::hybrid::UnadvertiseService* unadvertise_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unadvertise_service_;
  }
  if (unadvertise_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unadvertise_service);
    if (message_arena != submessage_arena) {
      unadvertise_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unadvertise_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.unadvertise_service_ = unadvertise_service;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.unadvertise_service)
}

// optional .hybrid.Log log = 11;
inline bool Command::_internal_has_log() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.log_ != nullptr);
  return value;
}
inline bool Command::has_log() const {
  return _internal_has_log();
}
inline void Command::clear_log() {
  if (_impl_.log_ != nullptr) _impl_.log_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::hybrid::Log& Command::_internal_log() const {
  const ::hybrid::Log* p = _impl_.log_;
  return p != nullptr ? *p : reinterpret_cast<const ::hybrid::Log&>(
      ::hybrid::_Log_default_instance_);
}
inline const ::hybrid::Log& Command::log() const {
  // @@protoc_insertion_point(field_get:hybrid.Command.log)
  return _internal_log();
}
inline void Command::unsafe_arena_set_allocated_log(
    ::hybrid::Log* log) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_);
  }
  _impl_.log_ = log;
  if (log) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hybrid.Command.log)
}
inline ::hybrid::Log* Command::release_log() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::hybrid::Log* temp = _impl_.log_;
  _impl_.log_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hybrid::Log* Command::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_release:hybrid.Command.log)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::hybrid::Log* temp = _impl_.log_;
  _impl_.log_ = nullptr;
  return temp;
}
inline ::hybrid::Log* Command::_internal_mutable_log() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.log_ == nullptr) {
    auto* p = CreateMaybeMessage<::hybrid::Log>(GetArenaForAllocation());
    _impl_.log_ = p;
  }
  return _impl_.log_;
}
inline ::hybrid::Log* Command::mutable_log() {
  ::hybrid::Log* _msg = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:hybrid.Command.log)
  return _msg;
}
inline void Command::set_allocated_log(::hybrid::Log* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.log_;
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.log_ = log;
  // @@protoc_insertion_point(field_set_allocated:hybrid.Command.log)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hybrid

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hybrid::Log_Level> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hybrid::Log_Level>() {
  return ::hybrid::Log_Level_descriptor();
}
template <> struct is_proto_enum< ::hybrid::Command_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hybrid::Command_Type>() {
  return ::hybrid::Command_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Command_2eproto
